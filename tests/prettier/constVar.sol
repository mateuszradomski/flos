IMulticall3 constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
KromaPortal constant portal = KromaPortal(payable ((0x713C2BEd44eB45D490afB8D4d1aA6F12290B829a)));
Vm constant vm = Vm(VM_ADDRESS);
Vm constant vm = Vm((uint160(uint256(keccak256("hevm cheat code")))));
VmSafe constant vmSafe = VmSafe(VM_ADDRESS);
VmSafe constant vm = VmSafe((uint160(uint256(keccak256("hevm cheat code")))));
ZkBridgeLike constant zkErc20Bridge = ZkBridgeLike(0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063);
ZkSyncInterface constant zkSync = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
ZkSyncInterface constant zkSyncEthBridge = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
ZkSyncInterface constant zkSyncMessageBridge = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
address constant BASE_FEE_VAULT = 0x4200000000000000000000000000000000000019;
address constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;
address constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
address constant Create2Deployer = 0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2;
address constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD;
address constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;
address constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;
address constant DROP_XDOMAIN_MESSAGE_SENDER = 0x6f297C61B5C92eF107fFD30CD56AFFE5A273e841;
address constant DeterministicDeploymentProxy = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
address constant EAS = 0x4200000000000000000000000000000000000021;
address constant EMPTY_ACTIVEOUTBOX = (type(uint160).max);
address constant EntryPoint = 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789;
address constant GAS_PRICE_ORACLE = 0x420000000000000000000000000000000000000F;
address constant GOVERNANCE_TOKEN = 0x4200000000000000000000000000000000000042;
address constant L1_BLOCK_ATTRIBUTES = 0x4200000000000000000000000000000000000015;
address constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;
address constant L1_FEE_VAULT = 0x420000000000000000000000000000000000001A;
address constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;
address constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;
address constant L2_ERC721_BRIDGE = 0x4200000000000000000000000000000000000014;
address constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;
address constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000016;
address constant LEGACY_ERC20_ETH = 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000;
address constant LEGACY_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;
address constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;
address constant MultiCall3 = 0xcA11bde05977b3631167028862bE2a173976CA11;
address constant MultiSendCallOnly_v130 = 0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B;
address constant MultiSend_v130 = 0x998739BFdAAdde7C933B942a68053933098f9EDa;
address constant OPTIMISM_MINTABLE_ERC20_FACTORY = 0x4200000000000000000000000000000000000012;
address constant OPTIMISM_MINTABLE_ERC721_FACTORY = 0x4200000000000000000000000000000000000017;
address constant PROXY_ADMIN = 0x4200000000000000000000000000000000000018;
address constant Permit2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;
address constant SCHEMA_REGISTRY = 0x4200000000000000000000000000000000000020;
address constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;
address constant SafeL2_v130 = 0xfb1bffC9d739B8D520DaF37dF666da4C687191EA;
address constant SafeSingletonFactory = 0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7;
address constant Safe_v130 = 0x69f4D1788e39c87893C980c06EdF4b7f686e2938;
address constant SenderCreator = 0x7fc98430eAEdbb6070B35B39D798725049088348;
address constant WETH9 = 0x4200000000000000000000000000000000000006;
address constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
address constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
address constant DAO_V1_TREASURY = 0xDd92eb1478D3189707aB7F4a5aCE3a615cdD0476;
address constant DAO_V1_VOTING_CONTRACT = 0x2211bFD97b1c02aE8Ac305d206e9780ba7D8BfF4;
address constant EMPTY_ACTIVEOUTBOX = (type(uint160).max);
address constant SENDER_DEFAULT_CONTEXT = (type(uint160).max);
address constant ETHPNT_TOKEN_ADDRESS = 0xf4eA6B892853413bD9d9f1a5D3a620A0ba39c5b2;
address constant PNT_TOKEN_ADDRESS = 0x89Ab32156e46F46D02ade3FEcbe5Fc4243B9AAeD;
address constant RETRYABLE_TICKET_MAGIC = 0xa723C008e76E379c55599D2E4d93879BeaFDa79C;
address constant l2RefundL2Address = 0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010;
bytes constant ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
bytes constant sha256MultiHash = hex"1220";
bytes constant EXPLANATION_KEY = "explanation";
bytes constant INITIALIZE_TX_BRIDGE_PARAMS = hex"80808401c9c38094";
string constant a = unicode"Hello ðŸ˜ƒ";
string constant b = unicode'Hello ðŸ˜ƒ';
bytes constant PROPOSAL_HASH_KEY = "proposalHash";
bytes constant RULES_KEY = "rules";
bytes constant arithmeticError = abi.encodeWithSignature("Panic(uint256)", 0x11);
bytes constant assertionError = abi.encodeWithSignature("Panic(uint256)", 0x01);
bytes constant divisionError = abi.encodeWithSignature("Panic(uint256)", 0x12);
bytes constant encodeStorageError = abi.encodeWithSignature("Panic(uint256)", 0x22);
bytes constant enumConversionError = abi.encodeWithSignature("Panic(uint256)", 0x21);
bytes constant indexOOBError = abi.encodeWithSignature("Panic(uint256)", 0x32);
bytes constant memOverflowError = abi.encodeWithSignature("Panic(uint256)", 0x41);
bytes constant popError = abi.encodeWithSignature("Panic(uint256)", 0x31);
bytes constant zeroVarError = abi.encodeWithSignature("Panic(uint256)", 0x51);
bytes1 constant MSG_ROOT = 0;
bytes1 constant DATA_AUTHENTICATED_FLAG = 0x40;
bytes1 constant INITIALIZE_TX_EFFECTIVE_PERCENTAGE = 0xFF;
bytes13 constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;
bytes13 constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;
bytes15 constant SUFFIX = hex"5af43d82803e903d91602b57fd5bf3";
bytes16 constant HEX_DIGITS = "0123456789abcdef";
bytes16 constant _HEX_SYMBOLS = "0123456789abcdef";
bytes16 constant _SYMBOLS = "0123456789abcdef";
bytes20 constant PREFIX = hex"3d602d80600a3d3981f3363d3d373d3d3d363d73";
bytes32 constant CREATE2_PREFIX = keccak256("zksyncCreate2");
bytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b; // keccak256("diamond.standard.diamond.storage") - 1;
bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("diamond.standard.diamond.storage");
bytes32 constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
bytes32 constant IMPLEMENTATION_KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant OWNER_KEY = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant Erc777Token_INTERFACE_HASH = keccak256("ERC777Token");
bytes32 constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");
bytes32 constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;
bytes32 constant APP_ID_POSITION = keccak256("aragonOS.appStorage.appId");
bytes32 constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
bytes32 constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;
bytes32 constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;
bytes32 constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash("evmreg");
bytes32 constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;
bytes32 constant EXECUTOR_TYPE = keccak256("CALLS_SCRIPT");
bytes32 constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;
bytes32 constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;
bytes32 constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;
bytes32 constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;
bytes32 constant KERNEL_APP_ADDR_NAMESPACE = keccak256("app");
bytes32 constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;
bytes32 constant KERNEL_APP_BASES_NAMESPACE = keccak256("base");
bytes32 constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;
bytes32 constant KERNEL_CORE_APP_ID = apmNamehash("kernel");
bytes32 constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;
bytes32 constant KERNEL_CORE_NAMESPACE = keccak256("core");
bytes32 constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;
bytes32 constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash("acl");
bytes32 constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;
bytes32 constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash("vault");
bytes32 constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;
bytes32 constant KERNEL_POSITION = keccak256("aragonOS.appStorage.kernel");
bytes32 constant KEY_ADMIN_EPOCH = keccak256('admin-epoch');
bytes32 constant KEY_ALL_TOKENS_FROZEN = keccak256('all-tokens-frozen');
bytes32 constant KEY_GOVERNANCE = bytes32(0xabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f909);
bytes32 constant KEY_IMPLEMENTATION = bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);
bytes32 constant KEY_MINT_LIMITER = bytes32(0x627f0c11732837b3240a2de89c0b6343512886dd50978b99c76a68c6416a4d92);
bytes32 constant KEY_OPERATOR_EPOCH = keccak256('operator-epoch');
bytes32 constant KEY_OWNER_EPOCH = keccak256('owner-epoch');
bytes32 constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;
bytes32 constant PREFIX_ADMIN = keccak256('admin');
bytes32 constant PREFIX_ADMIN_COUNT = keccak256('admin-count');
bytes32 constant PREFIX_ADMIN_THRESHOLD = keccak256('admin-threshold');
bytes32 constant PREFIX_ADMIN_VOTED = keccak256('admin-voted');
bytes32 constant PREFIX_ADMIN_VOTE_COUNTS = keccak256('admin-vote-counts');
bytes32 constant PREFIX_COMMAND_EXECUTED = keccak256('command-executed');
bytes32 constant PREFIX_CONTRACT_CALL_APPROVED = keccak256('contract-call-approved');
bytes32 constant PREFIX_CONTRACT_CALL_APPROVED_WITH_MINT = keccak256('contract-call-approved-with-mint');
bytes32 constant PREFIX_IS_ADMIN = keccak256('is-admin');
bytes32 constant PREFIX_IS_OPERATOR = keccak256('is-operator');
bytes32 constant PREFIX_IS_OWNER = keccak256('is-owner');
bytes32 constant PREFIX_OPERATOR = keccak256('operator');
bytes32 constant PREFIX_OPERATOR_COUNT = keccak256('operator-count');
bytes32 constant PREFIX_OPERATOR_THRESHOLD = keccak256('operator-threshold');
bytes32 constant PREFIX_OWNER = keccak256('owner');
bytes32 constant PREFIX_OWNER_COUNT = keccak256('owner-count');
bytes32 constant PREFIX_OWNER_THRESHOLD = keccak256('owner-threshold');
bytes32 constant PREFIX_TIME_LOCK = keccak256('time-lock');
bytes32 constant PREFIX_TOKEN_ADDRESS = keccak256('token-address');
bytes32 constant PREFIX_TOKEN_FROZEN = keccak256('token-frozen');
bytes32 constant PREFIX_TOKEN_MINT_AMOUNT = keccak256('token-mint-amount');
bytes32 constant PREFIX_TOKEN_MINT_LIMIT = keccak256('token-mint-limit');
bytes32 constant PREFIX_TOKEN_TYPE = keccak256('token-type');
bytes32 constant PROXY_OWNER_ADDRESS = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant REENTRANCY_MUTEX_POSITION = keccak256("aragonOS.reentrancyGuard.mutex");
bytes32 constant SELECTOR_APPROVE_CONTRACT_CALL = keccak256('approveContractCall');
bytes32 constant SELECTOR_APPROVE_CONTRACT_CALL_WITH_MINT = keccak256('approveContractCallWithMint');
bytes32 constant SELECTOR_BURN_TOKEN = keccak256('burnToken');
bytes32 constant SELECTOR_DEPLOY_TOKEN = keccak256('deployToken');
bytes32 constant SELECTOR_MINT_TOKEN = keccak256('mintToken');
bytes32 constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256('transferOperatorship');
bytes32 constant SELECTOR_TRANSFER_OWNERSHIP = keccak256('transferOwnership');
bytes32 constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
bytes32 constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant _OWNER_SLOT = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;
bytes32 constant _SET_FEE_ROLE = keccak256("SET_FEE_ROLE");
bytes32 constant CHILD_CHAIN = keccak256("childChain");
bytes32 constant CREATE2_PREFIX = keccak256("zksyncCreate2");
bytes32 constant DEPOSIT_MANAGER = keccak256("depositManager");
bytes32 constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;
bytes32 constant DOMAIN_TYPE_SIGNATURE_HASH = bytes32(0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f);
bytes32 constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
bytes32 constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;
bytes32 constant KEY_ALL_TOKENS_FROZEN = keccak256('all-tokens-frozen');
bytes32 constant OUTPUTID_DEFAULT_CONTEXT = bytes32(type(uint256).max);
bytes32 constant PERMIT_SIGNATURE_HASH = bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9);
bytes32 constant PREFIX_TOKEN_FROZEN = keccak256('token-frozen');
bytes32 constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;
bytes32 constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;
bytes32 constant SLASHING_MANAGER = keccak256("slashingManager");
bytes32 constant STAKE_MANAGER = keccak256("stakeManager");
bytes32 constant STATE_SENDER = keccak256("stateSender");
bytes32 constant VALIDATOR_SHARE = keccak256("validatorShare");
bytes32 constant WETH_TOKEN = keccak256("wethToken");
bytes32 constant WITHDRAW_MANAGER = keccak256("withdrawManager");
bytes32 constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
bytes32 constant _HASHED_NAME = keccak256("Permit2");
bytes32 constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;
bytes32 constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId)");
bytes32 constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
bytes32 constant masterPosition = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant targetPosition = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
bytes32 constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;
bytes32 constant APP_MANAGER_ROLE = keccak256("APP_MANAGER_ROLE");
bytes32 constant Bridge = "Bridge";
bytes32 constant CANCELLER_ROLE = keccak256("CANCELLER_ROLE");
bytes32 constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;
bytes32 constant CREATE_PERMISSIONS_ROLE = keccak256("CREATE_PERMISSIONS_ROLE");
bytes32 constant CREATE_VOTES_ROLE = keccak256("CREATE_VOTES_ROLE");
bytes32 constant ChildMessenger = "ChildMessenger";
bytes32 constant CollateralWhitelist = "CollateralWhitelist";
bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;
bytes32 constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;
bytes32 constant EMPTY_PARAM_HASH = keccak256(uint256(0));
bytes32 constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
bytes32 constant FinancialContractsAdmin = "FinancialContractsAdmin";
bytes32 constant GUARDIAN_SLOT = bytes32(uint256(keccak256("superchainConfig.guardian")) - 1);
bytes32 constant GenericHandler = "GenericHandler";
bytes32 constant IdentifierWhitelist = "IdentifierWhitelist";
bytes32 constant MINTER_ROLE = keccak256("MINTER_ROLE");
bytes32 constant MODIFY_BUFFER_BLOCKS_ROLE = keccak256("MODIFY_BUFFER_BLOCKS_ROLE");
bytes32 constant MODIFY_EXECUTION_DELAY_ROLE = keccak256("MODIFY_EXECUTION_DELAY_ROLE");
bytes32 constant MODIFY_MIN_OPEN_VOTE_AMOUNT_ROLE = keccak256("MODIFY_MIN_OPEN_VOTE_AMOUNT_ROLE");
bytes32 constant MODIFY_QUORUM_ROLE = keccak256("MODIFY_QUORUM_ROLE");
bytes32 constant MODIFY_SUPPORT_ROLE = keccak256("MODIFY_SUPPORT_ROLE");
bytes32 constant NO_PERMISSION = bytes32(0);
bytes32 constant OP_ADD = keccak256("OP_ADD");
bytes32 constant OP_SUB = keccak256("OP_SUB");
bytes32 constant OptimisticOracle = "OptimisticOracle";
bytes32 constant OptimisticOracleV2 = "OptimisticOracleV2";
bytes32 constant OptimisticOracleV3 = "OptimisticOracleV3";
bytes32 constant Oracle = "Oracle";
bytes32 constant OracleHub = "OracleHub";
bytes32 constant OracleSpoke = "OracleSpoke";
bytes32 constant PAUSED_SLOT = bytes32(uint256(keccak256("superchainConfig.paused")) - 1);
bytes32 constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");
bytes32 constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;
bytes32 constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256("REGISTRY_ADD_EXECUTOR_ROLE");
bytes32 constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;
bytes32 constant REGISTRY_MANAGER_ROLE = keccak256("REGISTRY_MANAGER_ROLE");
bytes32 constant ROLE_GIRAFFE = keccak256("ROLE_GIRAFFE");
bytes32 constant ROLE_HIPPO = keccak256("ROLE_HIPPO");
bytes32 constant Registry = "Registry";
bytes32 constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;
bytes32 constant SkinnyOptimisticOracle = "SkinnyOptimisticOracle";
bytes32 constant Store = "Store";
bytes32 constant TIMELOCK_ADMIN_ROLE = keccak256("TIMELOCK_ADMIN_ROLE");
bytes32 constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256("systemconfig.unsafeblocksigner");
bytes32 constant _PING = keccak256("PING");
bytes32 constant _PONG = keccak256("PONG");
bytes32 constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256("TokenPermissions(address token,uint256 amount)");
bytes32 constant defaultIdentifier = "ASSERT_TRUTH";
bytes4 constant EIP1271_MAGIC_VALUE = 0x20c13b0b;
bytes4 constant ERC20_SELECTOR = bytes4(keccak256("ERC20Token(address)"));
bytes4 constant ERC721_SELECTOR = bytes4(keccak256("ERC721Token(address,uint256)"));
bytes4 constant ETH_SELECTOR = bytes4(keccak256("ETH()"));
bytes4 constant TRANSFER_SELECTOR = 0xa9059cbb;
bytes4 constant _ERC721_RECEIVED = 0x150b7a02;
bytes4 constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
bytes4 constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
bytes4 constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
bytes4 constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
bytes4 constant _INTERFACE_ID_INVALID = 0xffffffff;
bytes4 constant _PERMIT_SIGNATURE = 0xd505accf;
bytes4 constant _PERMIT_SIGNATURE_DAI = 0x8fcbaf0c;
int256 constant _INT256_MIN = --2 ** 255;
int256 constant _INT256_MIN = 2-- ** 255;
int256 constant INT256_MIN = --57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant _INT256_MIN = ++2 ** 255;
int256 constant INT256_MIN = --57896044618658097711785492504343953926634992332820282019728792003956564819968;

int256 constant _INT256_MIN = -2 ** 255;
int256 constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant _INT256_MIN = ~2 ** 255;
int256 constant INT256_MIN = ~57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant _INT256_MIN = !2 ** 255;
int256 constant INT256_MIN = !57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant SFP_SCALING_FACTOR = 10**18;
string constant BLUE = "\u001b[94m";
string constant BOLD = "\u001b[1m";
string constant CYAN = "\u001b[96m";
string constant DIM = "\u001b[2m";
string constant GOVERNANCE_TAG = "STARKWARE_DEFAULT_GOVERNANCE_INFO";
string constant GREEN = "\u001b[92m";
string constant INVERSE = "\u001b[7m";
string constant ITALIC = "\u001b[3m";
string constant L1L2_MESSAGE_MAP_TAG = "STARKNET_1.0_MSGING_L1TOL2_MAPPPING_V2";
string constant L1L2_MESSAGE_NONCE_TAG = "STARKNET_1.0_MSGING_L1TOL2_NONCE";
string constant L2L1_MESSAGE_MAP_TAG = "STARKNET_1.0_MSGING_L2TOL1_MAPPPING";
string constant MAGENTA = "\u001b[95m";
string constant OPERATORS_MAPPING_TAG = "STARKNET_1.0_ROLES_OPERATORS_MAPPING_TAG";
string constant RED = "\u001b[91m";
string constant RESET = "\u001b[0m";
string constant STARKNET_GOVERNANCE_INFO_TAG = "STARKNET_1.0_GOVERNANCE_INFO";
string constant STORAGE_TAG = "STARKWARE_CONTRACTS_GOVERENED_FINALIZABLE_1.0_TAG";
string constant UNDERLINE = "\u001b[4m";
string constant YELLOW = "\u001b[93m";
string constant BRIDGED_TOKEN_TAG = "STARKNET_ERC20_TOKEN_BRIDGE_TOKEN_ADDRESS";
string constant BRIDGE_IS_ACTIVE_TAG = "STARKNET_TOKEN_BRIDGE_IS_ACTIVE";
string constant CONFIG_HASH_TAG = "STARKNET_1.0_STARKNET_CONFIG_HASH";
string constant DEPOSITOR_ADDRESSES_TAG = "STARKNET_TOKEN_BRIDGE_DEPOSITOR_ADDRESSES";
string constant L2_TOKEN_TAG = "STARKNET_TOKEN_BRIDGE_L2_TOKEN_CONTRACT";
string constant MAX_DEPOSIT_TAG = "STARKNET_TOKEN_BRIDGE_MAX_DEPOSIT";
string constant MAX_TOTAL_BALANCE_TAG = "STARKNET_TOKEN_BRIDGE_MAX_TOTAL_BALANCE";
string constant MESSAGING_CONTRACT_TAG = "STARKNET_TOKEN_BRIDGE_MESSAGING_CONTRACT";
string constant MINTABLE_PREFIX = "MINTABLE:";
string constant NFT_ASSET_ID_PREFIX = "NFT:";
string constant PROGRAM_HASH_TAG = "STARKNET_1.0_INIT_PROGRAM_HASH_UINT";
string constant STATE_STRUCT_TAG = "STARKNET_1.0_INIT_STARKNET_STATE_STRUCT";
string constant VERIFIER_ADDRESS_TAG = "STARKNET_1.0_INIT_VERIFIER_ADDRESS";
string constant name = "ZkSync";
string constant version = "1.0";
string constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = '\x19\x01';
string constant ERROR_ADD_OVERFLOW = "MATH64_ADD_OVERFLOW";
string constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";
string constant ERROR_ALREADY_INITIALIZED = "INIT_ALREADY_INITIALIZED";
string constant ERROR_APP_NOT_CONTRACT = "KERNEL_APP_NOT_CONTRACT";
string constant ERROR_AUTH_FAILED = "APP_AUTH_FAILED";
string constant ERROR_AUTH_FAILED = "KERNEL_AUTH_FAILED";
string constant ERROR_AUTH_INIT_KERNEL = "ACL_AUTH_INIT_KERNEL";
string constant ERROR_AUTH_NO_MANAGER = "ACL_AUTH_NO_MANAGER";
string constant ERROR_BLACKLISTED_CALL = "EVMCALLS_BLACKLISTED_CALL";
string constant ERROR_CALL_REVERTED = "EVMCALLS_CALL_REVERTED";
string constant ERROR_CAN_NOT_EXECUTE = "DANDELION_VOTING_CAN_NOT_EXECUTE";
string constant ERROR_CAN_NOT_FORWARD = "DANDELION_VOTING_CAN_NOT_FORWARD";
string constant ERROR_CAN_NOT_OPEN_VOTE = "DANDELION_VOTING_CAN_NOT_OPEN_VOTE";
string constant ERROR_CAN_NOT_VOTE = "DANDELION_VOTING_CAN_NOT_VOTE";
string constant ERROR_CHANGE_QUORUM_PCTS = "DANDELION_VOTING_CHANGE_QUORUM_PCTS";
string constant ERROR_CHANGE_SUPPORT_PCTS = "DANDELION_VOTING_CHANGE_SUPPORT_PCTS";
string constant ERROR_CHANGE_SUPPORT_TOO_BIG = "DANDELION_VOTING_CHANGE_SUPP_TOO_BIG";
string constant ERROR_DISALLOWED = "RECOVER_DISALLOWED";
string constant ERROR_DIV_ZERO = "MATH64_DIV_ZERO";
string constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";
string constant ERROR_EXECUTOR_DISABLED = "EVMREG_EXECUTOR_DISABLED";
string constant ERROR_EXECUTOR_ENABLED = "EVMREG_EXECUTOR_ENABLED";
string constant ERROR_EXECUTOR_INVALID_RETURN = "EVMRUN_EXECUTOR_INVALID_RETURN";
string constant ERROR_EXECUTOR_UNAVAILABLE = "EVMRUN_EXECUTOR_UNAVAILABLE";
string constant ERROR_EXISTENT_MANAGER = "ACL_EXISTENT_MANAGER";
string constant ERROR_IMPROPER_LENGTH = "CONVERSION_IMPROPER_LENGTH";
string constant ERROR_INEXISTENT_EXECUTOR = "EVMREG_INEXISTENT_EXECUTOR";
string constant ERROR_INIT_PCTS = "DANDELION_VOTING_INIT_PCTS";
string constant ERROR_INIT_SUPPORT_TOO_BIG = "DANDELION_VOTING_INIT_SUPPORT_TOO_BIG";
string constant ERROR_INVALID_APP_CHANGE = "KERNEL_INVALID_APP_CHANGE";
string constant ERROR_INVALID_LENGTH = "EVMCALLS_INVALID_LENGTH";
string constant ERROR_MUL_OVERFLOW = "MATH64_MUL_OVERFLOW";
string constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";
string constant ERROR_NOT_INITIALIZED = "INIT_NOT_INITIALIZED";
string constant ERROR_NO_VOTE = "DANDELION_VOTING_NO_VOTE";
string constant ERROR_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";
string constant ERROR_ORACLE_SENDER_MISSING = "DANDELION_VOTING_ORACLE_SENDER_MISSING";
string constant ERROR_ORACLE_SENDER_TOO_BIG = "DANDELION_VOTING_ORACLE_SENDER_TOO_BIG";
string constant ERROR_ORACLE_SENDER_ZERO = "DANDELION_VOTING_ORACLE_SENDER_ZERO";
string constant ERROR_PROTECTED_STATE_MODIFIED = "EVMRUN_PROTECTED_STATE_MODIFIED";
string constant ERROR_REENTRANT = "REENTRANCY_REENTRANT_CALL";
string constant ERROR_SCRIPT_LENGTH_TOO_SHORT = "EVMREG_SCRIPT_LENGTH_TOO_SHORT";
string constant ERROR_SUB_UNDERFLOW = "MATH64_SUB_UNDERFLOW";
string constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";
string constant ERROR_TOKEN_ALLOWANCE_REVERTED = "SAFE_ERC_20_ALLOWANCE_REVERTED";
string constant ERROR_TOKEN_BALANCE_REVERTED = "SAFE_ERC_20_BALANCE_REVERTED";
string constant ERROR_TOKEN_TRANSFER_FAILED = "RECOVER_TOKEN_TRANSFER_FAILED";
string constant ERROR_VAULT_NOT_CONTRACT = "RECOVER_VAULT_NOT_CONTRACT";
string constant ERROR_VOTE_ID_ZERO = "DANDELION_VOTING_VOTE_ID_ZERO";
string constant NOT_CLONE = "NOT_CLONE";
string constant NO_CHAL = "NO_CHAL";
string constant MAIN_GOVERNANCE_INFO_TAG = "StarkEx.Main.2019.GovernorsInformation";
string constant PROXY_GOVERNANCE_TAG = "StarkEx.Proxy.2019.GovernorsInformation";
string constant PROXY_VERSION = "3.0.1";
string constant PROXY_VERSION = "3.0.2";
string constant UPGRADE_INTERFACE_VERSION = "5.0.0";
string constant VERSION = "1";
string constant VERSION = "1.0.0";
string constant VERSION = "1.3.0";
string constant _TOKEN_PERMISSIONS_TYPESTRING = "TokenPermissions(address token,uint256 amount)";
string constant getName = "AdminFacet";
string constant getName = "ExecutorFacet";
string constant getName = "GettersFacet";
string constant getName = "MailboxFacet";
string constant getName = "ValidatorTimelock";
string constant version = "1.1.0";
string constant version = "1.11.0";
string constant version = "1.3.0";
string constant version = "1.6.0";
string constant version = "1.7.0";
string constant version = "1.9.0";
string constant version = "2.0.0";
string constant version = "2.2.0";
string constant version = "2.4.0";
uint constant DEPOSIT_CONTRACT_TREE_DEPTH = 32;
uint constant MAX_DEPOSIT_COUNT = 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1;
uint constant BP_DENOMINATOR = 10000;
uint constant CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS = 2;
uint constant CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION = 1;
uint constant CONFIG_TYPE_ORACLE = 6;
uint constant CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS = 5;
uint constant CONFIG_TYPE_OUTBOUND_PROOF_TYPE = 4;
uint constant CONFIG_TYPE_RELAYER = 3;
uint constant DAO_PERDENTAGE         = 20;
uint constant GRACE_PERIOD = 14 days;
uint constant MAXIMUM_DELAY = 30 days;
uint constant MINIMUM_DELAY = 2 days;
uint constant MIN_CLAIM_DELAY        = 90 days;
uint constant MIN_WITHDRAW_DELAY     = 90 days;
uint constant REWARD_PERCENTAGE      = 70;
uint128 constant MAX_DEPOSIT_AMOUNT = 20282409603651670423947251286015;
uint128 constant L1BLOCK_DEFAULT_CONTEXT = type(uint128).max;
uint128 constant L2BLOCK_DEFAULT_CONTEXT = type(uint128).max;
uint128 constant TIMESTAMP_DEFAULT_CONTEXT = type(uint128).max;
uint128 constant OUTBOX_VERSION = 0;
uint128 constant OUTBOX_VERSION = 1;
uint128 constant OUTBOX_VERSION = 2;
uint16 constant lastMem = 1920;
uint16 constant pEval_l1 = 1888;
uint16 constant pH0w8_0 = 224;
uint16 constant pH0w8_1 = 256;
uint16 constant pH0w8_2 = 288;
uint16 constant pH0w8_3 = 320;
uint16 constant pH0w8_4 = 352;
uint16 constant pH0w8_5 = 384;
uint16 constant pH0w8_6 = 416;
uint16 constant pH0w8_7 = 448;
uint16 constant pH1w4_0 = 480;
uint16 constant pH1w4_1 = 512;
uint16 constant pH1w4_2 = 544;
uint16 constant pH1w4_3 = 576;
uint16 constant pH2w3_0 = 608;
uint16 constant pH2w3_1 = 640;
uint16 constant pH2w3_2 = 672;
uint16 constant pH3w3_0 = 704;
uint16 constant pH3w3_1 = 736;
uint16 constant pH3w3_2 = 768;
uint16 constant ARBITRARY_JUMP = 0x8003;
uint16 constant ARBITRARY_JUMP_IF = 0x8004;
uint16 constant BYTES32_VALS_NUM = 2;
uint16 constant CALL = 0x10;
uint16 constant CALLER_MODULE_INTERNAL_CALL = 0x800A;
uint16 constant CALL_INDIRECT = 0x11;
uint16 constant CROSS_MODULE_CALL = 0x8009;
uint16 constant DROP = 0x1A;
uint16 constant DUP = 0x8008;
uint16 constant F32_CONST = 0x43;
uint16 constant F32_LOAD = 0x2A;
uint16 constant F32_REINTERPRET_I32 = 0xBE;
uint16 constant F32_STORE = 0x38;
uint16 constant F64_CONST = 0x44;
uint16 constant F64_LOAD = 0x2B;
uint16 constant F64_REINTERPRET_I64 = 0xBF;
uint16 constant F64_STORE = 0x39;
uint16 constant GET_GLOBAL_STATE_BYTES32 = 0x8010;
uint16 constant GET_GLOBAL_STATE_U64 = 0x8012;
uint16 constant GLOBAL_GET = 0x23;
uint16 constant GLOBAL_SET = 0x24;
uint16 constant HALT_AND_SET_FINISHED = 0x8022;
uint16 constant I32_ADD = 0x6A;
uint16 constant I32_AND = 0x71;
uint16 constant I32_CONST = 0x41;
uint16 constant I32_DIV_S = 0x6D;
uint16 constant I32_DIV_U = 0x6E;
uint16 constant I32_EQZ = 0x45;
uint16 constant I32_EXTEND_16S = 0xC1;
uint16 constant I32_EXTEND_8S = 0xC0;
uint16 constant I32_LOAD = 0x28;
uint16 constant I32_LOAD16_S = 0x2E;
uint16 constant I32_LOAD16_U = 0x2F;
uint16 constant I32_LOAD8_S = 0x2C;
uint16 constant I32_LOAD8_U = 0x2D;
uint16 constant I32_MUL = 0x6C;
uint16 constant I32_OR = 0x72;
uint16 constant I32_REINTERPRET_F32 = 0xBC;
uint16 constant I32_RELOP_BASE = 0x46;
uint16 constant I32_REM_S = 0x6F;
uint16 constant I32_REM_U = 0x70;
uint16 constant I32_ROTL = 0x77;
uint16 constant I32_ROTR = 0x78;
uint16 constant I32_SHL = 0x74;
uint16 constant I32_SHR_S = 0x75;
uint16 constant I32_SHR_U = 0x76;
uint16 constant I32_STORE = 0x36;
uint16 constant I32_STORE16 = 0x3B;
uint16 constant I32_STORE8 = 0x3A;
uint16 constant I32_SUB = 0x6B;
uint16 constant I32_UNOP_BASE = 0x67;
uint16 constant I32_WRAP_I64 = 0xA7;
uint16 constant I32_XOR = 0x73;
uint16 constant I64_ADD = 0x7C;
uint16 constant I64_AND = 0x83;
uint16 constant I64_CONST = 0x42;
uint16 constant I64_DIV_S = 0x7F;
uint16 constant I64_DIV_U = 0x80;
uint16 constant I64_EQZ = 0x50;
uint16 constant I64_EXTEND_16S = 0xC3;
uint16 constant I64_EXTEND_32S = 0xC4;
uint16 constant I64_EXTEND_8S = 0xC2;
uint16 constant I64_EXTEND_I32_S = 0xAC;
uint16 constant I64_EXTEND_I32_U = 0xAD;
uint16 constant I64_LOAD = 0x29;
uint16 constant I64_LOAD16_S = 0x32;
uint16 constant I64_LOAD16_U = 0x33;
uint16 constant I64_LOAD32_S = 0x34;
uint16 constant I64_LOAD32_U = 0x35;
uint16 constant I64_LOAD8_S = 0x30;
uint16 constant I64_LOAD8_U = 0x31;
uint16 constant I64_MUL = 0x7E;
uint16 constant I64_OR = 0x84;
uint16 constant I64_REINTERPRET_F64 = 0xBD;
uint16 constant I64_RELOP_BASE = 0x51;
uint16 constant I64_REM_S = 0x81;
uint16 constant I64_REM_U = 0x82;
uint16 constant I64_ROTL = 0x89;
uint16 constant I64_ROTR = 0x8A;
uint16 constant I64_SHL = 0x86;
uint16 constant I64_SHR_S = 0x87;
uint16 constant I64_SHR_U = 0x88;
uint16 constant I64_STORE = 0x37;
uint16 constant I64_STORE16 = 0x3D;
uint16 constant I64_STORE32 = 0x3E;
uint16 constant I64_STORE8 = 0x3C;
uint16 constant I64_SUB = 0x7D;
uint16 constant I64_UNOP_BASE = 0x79;
uint16 constant I64_XOR = 0x85;
uint16 constant INIT_FRAME = 0x8002;
uint16 constant IRELOP_EQ = 0;
uint16 constant IRELOP_GE_S = 8;
uint16 constant IRELOP_GE_U = 9;
uint16 constant IRELOP_GT_S = 4;
uint16 constant IRELOP_GT_U = 5;
uint16 constant IRELOP_LAST = IRELOP_GE_U;
uint16 constant IRELOP_LE_S = 6;
uint16 constant IRELOP_LE_U = 7;
uint16 constant IRELOP_LT_S = 2;
uint16 constant IRELOP_LT_U = 3;
uint16 constant IRELOP_NE = 1;
uint16 constant IUNOP_CLZ = 0;
uint16 constant IUNOP_CTZ = 1;
uint16 constant IUNOP_LAST = IUNOP_POPCNT;
uint16 constant IUNOP_POPCNT = 2;
uint16 constant LOCAL_GET = 0x20;
uint16 constant LOCAL_SET = 0x21;
uint16 constant MEMORY_GROW = 0x40;
uint16 constant MEMORY_SIZE = 0x3F;
uint16 constant MOVE_FROM_INTERNAL_TO_STACK = 0x8006;
uint16 constant MOVE_FROM_STACK_TO_INTERNAL = 0x8005;
uint16 constant NOP = 0x01;
uint16 constant READ_INBOX_MESSAGE = 0x8021;
uint16 constant READ_PRE_IMAGE = 0x8020;
uint16 constant RETURN = 0x0F;
uint16 constant SELECT = 0x1B;
uint16 constant SET_GLOBAL_STATE_BYTES32 = 0x8011;
uint16 constant SET_GLOBAL_STATE_U64 = 0x8013;
uint16 constant U64_VALS_NUM = 2;
uint16 constant UNREACHABLE = 0x00;
uint16 constant BLOCK_VERSION = 65535;
uint16 constant DEFAULT_VERSION = 0;
uint16 constant INITIALIZE_TX_CONSTANT_BYTES = 32;
uint16 constant INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA = 31;
uint16 constant MESSAGE_VERSION = 1;
uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);
uint160 constant OFFSET = uint160(0x1111000000000000000000000000000000001111);
uint256 constant ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP = 1;
uint256 constant ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP_OLD = 1;
uint256 constant BRIDGE = 0xa4b5;
uint256 constant C0x  = 7005013949998269612234996630658580519456097203281734268590713858661772481668;
uint256 constant C0y  = 869093939501355406318588453775243436758538662501260653214950591532352435323;
uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;
uint256 constant DELAYED_INBOX = 0xa4b6;
uint256 constant DEPLOY_L2_BRIDGE_COUNTERPART_GAS_LIMIT = 10000000;
uint256 constant ENTRY_NOT_FOUND = uint256(~0);
uint256 constant FOUR = 4;
uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
uint256 constant G1x  = 1;
uint256 constant G1y  = 2;
uint256 constant G2x1 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
uint256 constant G2x2 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
uint256 constant G2y1 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
uint256 constant G2y2 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
uint256 constant GLOBAL_CONFIG_KEY = uint256(~0);
uint256 constant IDX_MAP_0 = 0x3000100000203000002010004002012003003200010000001222000021002010;
uint256 constant IDX_MAP_1 = 0x4300000140200010000000001000030000300100000222303302;
uint256 constant IDX_MAP_2 = 0x10001300000020200020000220001002020000320000020031100030020012;
uint256 constant IDX_MAP_3 = 0x120300002000000000000100000000202001002000040101130302000000;
uint256 constant LIMB_WIDTH = 68;
uint256 constant MAGIC_SALT = 24748;
uint256 constant MAX_L1_MSG_FEE = 1 ether;
uint256 constant MESSAGE_TO_L1_FROM_ADDRESS_OFFSET = 0;
uint256 constant MESSAGE_TO_L1_PAYLOAD_SIZE_OFFSET = 2;
uint256 constant MESSAGE_TO_L1_PREFIX_SIZE = 3;
uint256 constant MESSAGE_TO_L1_TO_ADDRESS_OFFSET = 1;
uint256 constant MESSAGE_TO_L2_FROM_ADDRESS_OFFSET = 0;
uint256 constant MESSAGE_TO_L2_NONCE_OFFSET = 2;
uint256 constant MESSAGE_TO_L2_PAYLOAD_SIZE_OFFSET = 4;
uint256 constant MESSAGE_TO_L2_PREFIX_SIZE = 5;
uint256 constant MESSAGE_TO_L2_SELECTOR_OFFSET = 3;
uint256 constant MESSAGE_TO_L2_TO_ADDRESS_OFFSET = 1;
uint256 constant NODE_BEACON = 0xa4b3;
uint256 constant NUM_DIFFERENT_GATES = 2;
uint256 constant NUM_GATE_SELECTORS_OPENED_EXPLICITLY = 1;
uint256 constant NUM_SETUP_POLYS_FOR_MAIN_GATE = 7;
uint256 constant NUM_SETUP_POLYS_RANGE_CHECK_GATE = 0;
uint256 constant ONE = 1;
uint256 constant OUTBOX = 0xa4b4;
uint256 constant PERPETUAL_AMOUNT_UPPER_BOUND = 2**64;
uint256 constant PERPETUAL_ASSET_ID_UPPER_BOUND = 2**120;
uint256 constant PERPETUAL_CONFIGURATION_DELAY = 0;
uint256 constant PERPETUAL_POSITION_ID_UPPER_BOUND = 2**64;
uint256 constant PERPETUAL_SYSTEM_TIME_ADVANCE_BOUND = 4 hours;
uint256 constant PERPETUAL_SYSTEM_TIME_LAG_BOUND = 14 days;
uint256 constant PERPETUAL_TIMESTAMP_BITS = 32;
uint256 constant QUANTUM_UPPER_BOUND = 2**128;
uint256 constant REQUIRED_L2_GAS_PRICE_PER_PUBDATA = 800;
uint256 constant ROLLUP_ADMIN = 0xa4b2;
uint256 constant ROLLUP_USER = 0xa4b1;
uint256 constant SEQ_INBOX = 0xa4b7;
uint256 constant SERIALIZED_PROOF_LENGTH = 34;
uint256 constant SERIALIZED_PROOF_LENGTH_OLD = 33;
uint256 constant STARKEX_EXPIRATION_TIMESTAMP_BITS = 22;
uint256 constant STARKEX_MAX_QUANTUM = 2**128 - 1;
uint256 constant STARKEX_MAX_VAULT_ID = 2**31 - 1;
uint256 constant STATE_WIDTH = 4;
uint256 constant STATE_WIDTH_OLD = 4;
uint256 constant SUBCONTRACT_BITS = 4;
uint256 constant THREE = 3;
uint256 constant TRANSFER_FROM_STARKNET = 0;
uint256 constant TWO = 2;
uint256 constant UINT256_PART_SIZE = 2**UINT256_PART_SIZE_BITS;
uint256 constant UINT256_PART_SIZE_BITS = 128;
uint256 constant VK_TREE_ROOT = 0x1ffdc7ebe04681d451ae0658a6ad27feb63835b0edf90bdfa203cd8d12282ace;
uint256 constant VK_TREE_ROOT = 0x27362ec1b4c43df95bd87dc1b1591227b4095aaeb2e030db431c291daf986550;
uint256 constant X2x1 = 21831381940315734285607113342023901060522397560371972897001948545212302161822;
uint256 constant X2x2 = 17231025384763736816414546592865244497437017442647097510447326538965263639101;
uint256 constant X2y1 = 2388026358213174446665280700919698872609886601280537296205114254867301080648;
uint256 constant X2y2 = 11507326595632554467052522095592665270651932854513688777769618397986436103170;
uint256 constant ZERO = 0;
uint256 constant bn254_b_coeff = 3;
uint256 constant BATCH_INVERSE_CHUNK = (2 + N_ROWS_IN_MASK);
uint256 constant BATCH_INVERSE_SIZE = MAX_N_QUERIES * BATCH_INVERSE_CHUNK;
uint256 constant CHANNEL_STATE_SIZE = 3;
uint256 constant CONSTRAINTS_DEGREE_BOUND = 2;
uint256 constant ECDSA_BUILTIN_RATIO = 2048;
uint256 constant ECDSA_BUILTIN_RATIO = 512;
uint256 constant ECDSA_BUILTIN_REPETITIONS = 1;
uint256 constant FRI_CTX_TO_COSET_EVALUATIONS_OFFSET = 0;
uint256 constant FRI_CTX_TO_FRI_GROUP_OFFSET = FRI_GROUP_SIZE;
uint256 constant FRI_GROUP_SIZE = 0x20 * MAX_COSET_SIZE;
uint256 constant FRI_MAX_FRI_STEP = 4;
uint256 constant FRI_QUEUE_SIZE = MAX_N_QUERIES;
uint256 constant GENERATOR_VAL = 3;
uint256 constant LAYOUT_CODE = 2073345364981693374828;
uint256 constant LAYOUT_CODE = 495756340332;
uint256 constant LAYOUT_CODE = 6579576;
uint256 constant LAYOUT_LENGTH = 2**64;
uint256 constant LOG_CPU_COMPONENT_HEIGHT = 4;
uint256 constant MASK_SIZE = 133;
uint256 constant MASK_SIZE = 205;
uint256 constant MASK_SIZE = 206;
uint256 constant MAX_COSET_SIZE = 2**FRI_MAX_FRI_STEP;
uint256 constant MAX_FRI_STEP = 3;
uint256 constant MAX_N_MERKLE_VERIFIER_QUERIES =  128;
uint256 constant MAX_N_QUERIES =  48;
uint256 constant MAX_SUPPORTED_MAX_FRI_STEP = 4;
uint256 constant MM_BLOW_UP_FACTOR =                            0x1;
uint256 constant MM_CONSTRAINT_POLY_ARGS_END =                0x2c2;
uint256 constant MM_CONSTRAINT_POLY_ARGS_END =                0x388;
uint256 constant MM_CONSTRAINT_POLY_ARGS_END =                0x389;
uint256 constant MM_CONSTRAINT_POLY_ARGS_START =              0x13d;
uint256 constant MM_CONTEXT_SIZE =                            0x5be;
uint256 constant MM_CONTEXT_SIZE =                            0x90c;
uint256 constant MM_CONTEXT_SIZE =                            0x99e;
uint256 constant MM_ECDSA__SIG_CONFIG_ALPHA =                 0x153;
uint256 constant MM_ECDSA__SIG_CONFIG_BETA =                  0x156;
uint256 constant MM_ECDSA__SIG_CONFIG_SHIFT_POINT_X =         0x154;
uint256 constant MM_ECDSA__SIG_CONFIG_SHIFT_POINT_Y =         0x155;
uint256 constant MM_EVAL_DOMAIN_GENERATOR =                     0x4;
uint256 constant MM_EVAL_DOMAIN_SIZE =                          0x0;
uint256 constant MM_FINAL_AP =                                0x146;
uint256 constant MM_FINAL_CHECKPOINTS_ADDR =                  0x159;
uint256 constant MM_FINAL_PC =                                0x147;
uint256 constant MM_FRI_LAST_LAYER_DEG_BOUND =                0x13b;
uint256 constant MM_FRI_LAST_LAYER_PTR =                      0x13c;
uint256 constant MM_FRI_QUERIES_DELIMITER =                    0xfd;
uint256 constant MM_FRI_STEPS_PTR =                           0x126;
uint256 constant MM_HALF_OFFSET_SIZE =                        0x143;
uint256 constant MM_INITIAL_AP =                              0x144;
uint256 constant MM_INITIAL_CHECKPOINTS_ADDR =                0x158;
uint256 constant MM_INITIAL_ECDSA_ADDR =                      0x157;
uint256 constant MM_INITIAL_PC =                              0x145;
uint256 constant MM_INITIAL_PEDERSEN_ADDR =                   0x151;
uint256 constant MM_INITIAL_RC_ADDR =                         0x152;
uint256 constant MM_LOG_EVAL_DOMAIN_SIZE =                      0x2;
uint256 constant MM_LOG_N_STEPS =                             0x5bb;
uint256 constant MM_LOG_N_STEPS =                             0x909;
uint256 constant MM_LOG_N_STEPS =                             0x99b;
uint256 constant MM_MEMORY__MULTI_COLUMN_PERM__HASH_INTERACTION_ELM0 = 0x149;
uint256 constant MM_MEMORY__MULTI_COLUMN_PERM__PERM__INTERACTION_ELM = 0x148;
uint256 constant MM_MEMORY__MULTI_COLUMN_PERM__PERM__PUBLIC_MEMORY_PROD = 0x14a;
uint256 constant MM_N_PUBLIC_MEM_ENTRIES =                    0x5bc;
uint256 constant MM_N_PUBLIC_MEM_ENTRIES =                    0x90a;
uint256 constant MM_N_PUBLIC_MEM_ENTRIES =                    0x99c;
uint256 constant MM_N_PUBLIC_MEM_PAGES =                      0x5bd;
uint256 constant MM_N_PUBLIC_MEM_PAGES =                      0x90b;
uint256 constant MM_N_PUBLIC_MEM_PAGES =                      0x99d;
uint256 constant MM_N_UNIQUE_QUERIES =                          0x9;
uint256 constant MM_OFFSET_SIZE =                             0x142;
uint256 constant MM_OODS_COMMITMENT =                           0x8;
uint256 constant MM_OODS_POINT =                              0x15b;
uint256 constant MM_PEDERSEN__SHIFT_POINT_X =                 0x14f;
uint256 constant MM_PEDERSEN__SHIFT_POINT_Y =                 0x150;
uint256 constant MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__X = 0x13f;
uint256 constant MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__Y = 0x140;
uint256 constant MM_PERIODIC_COLUMN__PEDERSEN__POINTS__X =    0x13d;
uint256 constant MM_PERIODIC_COLUMN__PEDERSEN__POINTS__Y =    0x13e;
uint256 constant MM_PROOF_OF_WORK_BITS =                        0x3;
uint256 constant MM_PUBLIC_INPUT_PTR =                          0x5;
uint256 constant MM_RC16__PERM__INTERACTION_ELM =             0x14b;
uint256 constant MM_RC16__PERM__PUBLIC_MEMORY_PROD =          0x14c;
uint256 constant MM_RC_MAX =                                  0x14e;
uint256 constant MM_RC_MIN =                                  0x14d;
uint256 constant MM_TRACE_GENERATOR =                         0x15a;
uint256 constant MM_TRACE_LENGTH =                            0x141;
uint256 constant N_COEFFICIENTS = 222;
uint256 constant N_COEFFICIENTS = 348;
uint256 constant N_COLUMNS_IN_MASK = 10;
uint256 constant N_COLUMNS_IN_MASK = 22;
uint256 constant N_COLUMNS_IN_MASK = 25;
uint256 constant N_COLUMNS_IN_TRACE0 = 21;
uint256 constant N_COLUMNS_IN_TRACE0 = 23;
uint256 constant N_COLUMNS_IN_TRACE0 = 9;
uint256 constant N_COLUMNS_IN_TRACE1 = 1;
uint256 constant N_COLUMNS_IN_TRACE1 = 2;
uint256 constant N_INTERACTION_ELEMENTS = 3;
uint256 constant N_OODS_COEFFICIENTS = N_OODS_VALUES;
uint256 constant N_OODS_VALUES = MASK_SIZE + CONSTRAINTS_DEGREE_BOUND;
uint256 constant N_ROWS_IN_MASK = 83;
uint256 constant N_ROWS_IN_MASK = 86;
uint256 constant N_ROWS_IN_MASK = 87;
uint256 constant N_TABLES = 63;
uint256 constant ONE_VAL = 1;
uint256 constant PEDERSEN_BUILTIN_RATIO = 32;
uint256 constant PEDERSEN_BUILTIN_RATIO = 8;
uint256 constant PEDERSEN_BUILTIN_REPETITIONS = 1;
uint256 constant PEDERSEN_BUILTIN_REPETITIONS = 4;
uint256 constant PROOF_PARAMS_FRI_LAST_LAYER_DEG_BOUND_OFFSET = 3;
uint256 constant PROOF_PARAMS_FRI_STEPS_OFFSET = 5;
uint256 constant PROOF_PARAMS_LOG_BLOWUP_FACTOR_OFFSET = 1;
uint256 constant PROOF_PARAMS_N_FRI_STEPS_OFFSET = 4;
uint256 constant PROOF_PARAMS_N_QUERIES_OFFSET = 0;
uint256 constant PROOF_PARAMS_PROOF_OF_WORK_BITS_OFFSET = 2;
uint256 constant PUBLIC_MEMORY_STEP = 8;
uint256 constant RC_BUILTIN_RATIO = 16;
uint256 constant RC_BUILTIN_RATIO = 8;
uint256 constant RC_N_PARTS = 8;
uint256 constant CHANNEL_STATE_SIZE = 3;
uint256 constant q    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
uint256 constant q_mod = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
uint256 constant qf   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
uint256 constant r_mod = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
uint256 constant w1   = 5709868443893258075976348696661355716898495876243883251619397131511003808859;
uint256 constant w3   = 21888242871839275217838484774961031246154997185409878258781734729429964517155;
uint256 constant w3_2 = 4407920970296243842393367215006156084916469457145843978461;
uint256 constant w4   = 21888242871839275217838484774961031246007050428528088939761107053157389710902;
uint256 constant w4_2 = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
uint256 constant w4_3 = 4407920970296243842541313971887945403937097133418418784715;
uint256 constant w8_1 = 19540430494807482326159819597004422086093766032135589407132600596362845576832;
uint256 constant w8_2 = 21888242871839275217838484774961031246007050428528088939761107053157389710902;
uint256 constant w8_3 = 13274704216607947843011480449124596415239537050559949017414504948711435969894;
uint256 constant w8_4 = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
uint256 constant w8_5 = 2347812377031792896086586148252853002454598368280444936565603590212962918785;
uint256 constant w8_6 = 4407920970296243842541313971887945403937097133418418784715;
uint256 constant w8_7 = 8613538655231327379234925296132678673308827349856085326283699237864372525723;
uint256 constant wr   = 18200100796661656210024324131237448517259556535315737226009542456080026430510;
uint256 constant AGGREGATED_AT_Z_OMEGA_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x40;
uint256 constant AGGREGATED_AT_Z_OMEGA_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x60;
uint256 constant AGGREGATED_AT_Z_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x00;
uint256 constant AGGREGATED_AT_Z_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x20;
uint256 constant AGGREGATED_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0xa0;
uint256 constant AGGREGATED_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x80;
uint256 constant AGGREGATED_AT_Z_OMEGA_X_SLOT = 0x200 ^ 0x520 & 0x620 | 0x80 | 0x2c0 ^ 0x100 & 0x40;
uint256 constant AGGREGATED_AT_Z_OMEGA_X_SLOT = 0x200 ^ 0x520 | 0x620 | 0x80 | 0x2c0 ^ 0x100 & 0x40;
uint256 constant AGGREGATED_AT_Z_OMEGA_Y_SLOT = 0x200 ^ 0x520 & 0x620 & 0x80 | 0x2c0 | 0x100 & 0x60;
uint256 constant AGGREGATED_AT_Z_X_SLOT = 0x200 | 0x520 & 0x620 | 0x80 | 0x2c0 ^ 0x100 & 0x00;
uint256 constant AGGREGATED_AT_Z_Y_SLOT = 0x200 ^ 0x520 ^ 0x620 | 0x80 & 0x2c0 ^ 0x100 & 0x20;
uint256 constant APP_DATA_BATCH_ID_OFFSET = 0;
uint256 constant APP_DATA_CONDITIONAL_TRANSFER_DATA_OFFSET = 3;
uint256 constant APP_DATA_N_CONDITIONAL_TRANSFER = 2;
uint256 constant APP_DATA_N_WORDS_PER_CONDITIONAL_TRANSFER = 2;
uint256 constant APP_DATA_PREVIOUS_BATCH_ID_OFFSET = 1;
uint256 constant ASSET_CONFIG_OFFSET_ASSET_ID = 0;
uint256 constant ASSET_CONFIG_OFFSET_CONFIG_HASH = 1;
uint256 constant AUTH_FACT_RESET_TIMELOCK = 1 days;
uint256 constant BALANCE_BIAS = 2**63;
uint256 constant BALANCE_BITS = 64;
uint256 constant BATCH_CONTEXT_LENGTH_POS = 12;
uint256 constant BATCH_CONTEXT_SIZE = 16;
uint256 constant BATCH_CONTEXT_START_POS = 15;
uint256 constant BLOCK_CONTEXT_LENGTH = 60;
uint256 constant BLOCK_HASH_OFFSET = 3;
uint256 constant BLOCK_NUMBER_OFFSET = 2;
uint256 constant BLOCK_PERIOD = 15 seconds;
uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;
uint256 constant BYTES_TILL_TX_DATA = 65;
uint256 constant CHANGE_PUBKEY_BYTES = 6 * CHUNK_BYTES;
uint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 15 minutes;
uint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 24 hours;
uint256 constant CONFIG_HASH_OFFSET = 4;
uint256 constant CONTINUOUS_PAGE = 1;
uint256 constant DEPOSIT_BYTES = 6 * CHUNK_BYTES;
uint256 constant DEPOSIT_VERSION = 0;
uint256 constant EXECUTED_PROPOSAL_TIMESTAMP = uint256(1);
uint256 constant EXPECT_VERIFICATION_IN = 0 hours / BLOCK_PERIOD;
uint256 constant FINAL_PC = INITIAL_PC + 2;
uint256 constant FIRST_CONTINUOUS_PAGE_INDEX = 1;
uint256 constant FORCED_EXIT_BYTES = 6 * CHUNK_BYTES;
uint256 constant FORWARDING = 1;
uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
uint256 constant FULL_EXIT_BYTES = 11 * CHUNK_BYTES;
uint256 constant FUNDING_BITS = 64;
uint256 constant FUNDING_ENTRY_SIZE = 2;
uint256 constant FWD_GAS_LIMIT = 10000;
uint256 constant FXP_BITS = 32;
uint256 constant G2_ELEMENTS_0_X1 = 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2;
uint256 constant G2_ELEMENTS_0_X2 = 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed;
uint256 constant G2_ELEMENTS_0_Y1 = 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b;
uint256 constant G2_ELEMENTS_0_Y2 = 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa;
uint256 constant G2_ELEMENTS_1_X1 = 0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1;
uint256 constant G2_ELEMENTS_1_X2 = 0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0;
uint256 constant G2_ELEMENTS_1_Y1 = 0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4;
uint256 constant G2_ELEMENTS_1_Y2 = 0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55;
uint256 constant HEADER_SIZE = 5;
uint256 constant INBOX_INDEX_DELAYED = 1;
uint256 constant INBOX_INDEX_SEQUENCER = 0;
uint256 constant INITIAL_PC = 1;
uint256 constant INPUT_MASK = 14474011154664524427946373126085988481658748083205070504932198000989141204991;
uint256 constant IS_LOCKED = uint256(2);
uint256 constant IS_NOT_LOCKED = uint256(1);
uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;
uint256 constant MASS_FULL_EXIT_PERIOD = 5 days;
uint256 constant MAX_LEAVES = 2**TREE_DEPTH - 1;
uint256 constant MAX_LIST_LENGTH = 32;
uint256 constant MAX_STEPS = 1 << 43;
uint256 constant MAX_STEPS = 1 >> 43;
uint256 constant MERKLE_UPDATE_OFFSET = 0;
uint256 constant METADATA_OFFSET_TASK_N_TREE_PAIRS = 2;
uint256 constant METADATA_OFFSET_TASK_OUTPUT_SIZE = 0;
uint256 constant METADATA_OFFSET_TASK_PROGRAM_HASH = 1;
uint256 constant METADATA_OFFSET_TREE_PAIR_N_NODES = 1;
uint256 constant METADATA_OFFSET_TREE_PAIR_N_PAGES = 0;
uint256 constant METADATA_TASKS_OFFSET = 1;
uint256 constant METADATA_TASKS_OFFSET = array[2 +4];
uint256 constant METADATA_TASKS_OFFSET = array[arrayIndex ** 2 + fnCall(1,2,3)];
uint256 constant METADATA_TASK_HEADER_SIZE = 3;
uint256 constant MINTABLE_ASSET_ID_FLAG = 1<<250;
uint256 constant MINT_NFT_BYTES = 5 * CHUNK_BYTES;
uint256 constant MODIFICATIONS_OFFSET_BIASED_DIFF = 2;
uint256 constant MODIFICATIONS_OFFSET_POS_ID = 1;
uint256 constant MODIFICATIONS_OFFSET_STARKKEY = 0;
uint256 constant NODE_STACK_ITEM_SIZE = 2;
uint256 constant NODE_STACK_OFFSET_END = 1;
uint256 constant NODE_STACK_OFFSET_HASH = 0;
uint256 constant NON_RESIDUES_0 = 0x05;
uint256 constant NON_RESIDUES_1 = 0x07;
uint256 constant NON_RESIDUES_2 = 0x0a;
uint256 constant NOOP_BYTES = 1 * CHUNK_BYTES;
uint256 constant N_ASSETS_BITS = 16;
uint256 constant N_BUILTINS = 4;
uint256 constant N_MAIN_ARGS = 5;
uint256 constant N_MAIN_RETURN_VALUES = 5;
uint256 constant N_WORDS_PER_PUBLIC_MEMORY_ENTRY = 2;
uint256 constant OFFSET_CHECKPOINTS_BEGIN_PTR = 16;
uint256 constant OFFSET_CHECKPOINTS_STOP_PTR = 17;
uint256 constant OFFSET_ECDSA_BEGIN_ADDR = 14;
uint256 constant OFFSET_ECDSA_STOP_PTR = 15;
uint256 constant OFFSET_EXECUTION_BEGIN_ADDR = 6;
uint256 constant OFFSET_EXECUTION_STOP_PTR = 7;
uint256 constant OFFSET_LAYOUT_CODE = 3;
uint256 constant OFFSET_LOG_N_STEPS = 0;
uint256 constant OFFSET_N_PUBLIC_MEMORY_PAGES = 20;
uint256 constant OFFSET_OUTPUT_BEGIN_ADDR = 8;
uint256 constant OFFSET_OUTPUT_STOP_PTR = 9;
uint256 constant OFFSET_PEDERSEN_BEGIN_ADDR = 10;
uint256 constant OFFSET_PEDERSEN_STOP_PTR = 11;
uint256 constant OFFSET_PROGRAM_BEGIN_ADDR = 4;
uint256 constant OFFSET_PROGRAM_STOP_PTR = 5;
uint256 constant OFFSET_PUBLIC_MEMORY = 21;
uint256 constant OFFSET_PUBLIC_MEMORY_PADDING_ADDR = 18;
uint256 constant OFFSET_PUBLIC_MEMORY_PADDING_VALUE = 19;
uint256 constant OFFSET_RANGE_CHECK_BEGIN_ADDR = 12;
uint256 constant OFFSET_RANGE_CHECK_STOP_PTR = 13;
uint256 constant OFFSET_RC_MAX = 2;
uint256 constant OFFSET_RC_MIN = 1;
uint256 constant OLD_KEY_RETENTION = 16;
uint256 constant OMEGA = 0x1951441010b2b95a6e47a6075066a50a036f5ba978c050f2821df86636c0facb;
uint256 constant ONCHAIN_DATA_FACT_ADDITIONAL_WORDS = 2;
uint256 constant PAIRING_BUFFER_POINT_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0xc0 + 0x00;
uint256 constant PAIRING_BUFFER_POINT_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0xc0 + 0x20;
uint256 constant PAIRING_PAIR_WITH_X_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x100 + 0x80;
uint256 constant PAIRING_PAIR_WITH_X_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x100 + 0xa0;
uint256 constant PARTIAL_EXIT_BYTES = 6 * CHUNK_BYTES;
uint256 constant PETRIFIED_BLOCK = uint256(-1);
uint256 constant PRICE_ENTRY_SIZE = 2;
uint256 constant PRIORITY_EXPIRATION_PERIOD = 14 days;
uint256 constant PROGRAM_SIZE = 224;
uint256 constant PROG_OUT_ASSET_CONFIG_HASHES = 2;
uint256 constant PROG_OUT_GENERAL_CONFIG_HASH = 0;
uint256 constant PROG_OUT_N_ASSET_CONFIGS = 1;
uint256 constant PROG_OUT_N_WORDS_MIN_SIZE = 8;
uint256 constant PROG_OUT_N_WORDS_PER_ASSET_CONFIG = 2;
uint256 constant PROG_OUT_N_WORDS_PER_MODIFICATION = 3;
uint256 constant PROOF_COPY_PERMUTATION_GRAND_PRODUCT_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x400;
uint256 constant PROOF_COPY_PERMUTATION_GRAND_PRODUCT_X_SLOT = 0x200 + 0x520 + 0x120;
uint256 constant PROOF_COPY_PERMUTATION_GRAND_PRODUCT_Y_SLOT = 0x200 + 0x520 + 0x140;
uint256 constant PROOF_COPY_PERMUTATION_POLYS_0_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x3a0;
uint256 constant PROOF_COPY_PERMUTATION_POLYS_1_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x3c0;
uint256 constant PROOF_COPY_PERMUTATION_POLYS_2_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x3e0;
uint256 constant PROOF_GATE_SELECTORS_0_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x380;
uint256 constant PROOF_LINEARISATION_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x500;
uint256 constant PROOF_LOOKUP_GRAND_PRODUCT_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x440;
uint256 constant PROOF_LOOKUP_GRAND_PRODUCT_X_SLOT = 0x200 + 0x520 + 0x1a0;
uint256 constant PROOF_LOOKUP_GRAND_PRODUCT_Y_SLOT = 0x200 + 0x520 + 0x1c0;
uint256 constant PROOF_LOOKUP_SELECTOR_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x4a0;
uint256 constant PROOF_LOOKUP_S_POLY_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x420;
uint256 constant PROOF_LOOKUP_S_POLY_X_SLOT = 0x200 + 0x520 + 0x160;
uint256 constant PROOF_LOOKUP_S_POLY_Y_SLOT = 0x200 + 0x520 + 0x180;
uint256 constant PROOF_LOOKUP_TABLE_TYPE_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x4c0;
uint256 constant PROOF_LOOKUP_T_POLY_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x480;
uint256 constant PROOF_LOOKUP_T_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x460;
uint256 constant PROOF_OPENING_PROOF_AT_Z_OMEGA_X_SLOT = 0x200 + 0x520 + 0x560;
uint256 constant PROOF_OPENING_PROOF_AT_Z_OMEGA_Y_SLOT = 0x200 + 0x520 + 0x580;
uint256 constant PROOF_OPENING_PROOF_AT_Z_X_SLOT = 0x200 + 0x520 + 0x520;
uint256 constant PROOF_OPENING_PROOF_AT_Z_Y_SLOT = 0x200 + 0x520 + 0x540;
uint256 constant PROOF_PUBLIC_INPUT = 0x200 + 0x520 + 0x000;
uint256 constant PROOF_QUOTIENT_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x4e0;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_0_X_SLOT = 0x200 + 0x520 + 0x1e0;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_0_Y_SLOT = 0x200 + 0x520 + 0x200;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_1_X_SLOT = 0x200 + 0x520 + 0x220;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_1_Y_SLOT = 0x200 + 0x520 + 0x240;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_2_X_SLOT = 0x200 + 0x520 + 0x260;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_2_Y_SLOT = 0x200 + 0x520 + 0x280;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_3_X_SLOT = 0x200 + 0x520 + 0x2a0;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_3_Y_SLOT = 0x200 + 0x520 + 0x2c0;
uint256 constant PROOF_RECURSIVE_PART_P1_X_SLOT = 0x200 + 0x520 + 0x5a0;
uint256 constant PROOF_RECURSIVE_PART_P1_Y_SLOT = 0x200 + 0x520 + 0x5c0;
uint256 constant PROOF_RECURSIVE_PART_P2_X_SLOT = 0x200 + 0x520 + 0x5e0;
uint256 constant PROOF_RECURSIVE_PART_P2_Y_SLOT = 0x200 + 0x520 + 0x600;
uint256 constant PROOF_STATE_POLYS_0_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x2e0;
uint256 constant PROOF_STATE_POLYS_0_X_SLOT = 0x200 + 0x520 + 0x020;
uint256 constant PROOF_STATE_POLYS_0_Y_SLOT = 0x200 + 0x520 + 0x040;
uint256 constant PROOF_STATE_POLYS_1_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x300;
uint256 constant PROOF_STATE_POLYS_1_X_SLOT = 0x200 + 0x520 + 0x060;
uint256 constant PROOF_STATE_POLYS_1_Y_SLOT = 0x200 + 0x520 + 0x080;
uint256 constant PROOF_STATE_POLYS_2_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x320;
uint256 constant PROOF_STATE_POLYS_2_X_SLOT = 0x200 + 0x520 + 0x0a0;
uint256 constant PROOF_STATE_POLYS_2_Y_SLOT = 0x200 + 0x520 + 0x0c0;
uint256 constant PROOF_STATE_POLYS_3_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x360;
uint256 constant PROOF_STATE_POLYS_3_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x340;
uint256 constant PROOF_STATE_POLYS_3_X_SLOT = 0x200 + 0x520 + 0x0e0;
uint256 constant PROOF_STATE_POLYS_3_Y_SLOT = 0x200 + 0x520 + 0x100;
uint256 constant QUERIES_AT_Z_0_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x40;
uint256 constant QUERIES_AT_Z_0_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x60;
uint256 constant QUERIES_AT_Z_1_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x80;
uint256 constant QUERIES_AT_Z_1_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0xa0;
uint256 constant QUERIES_BUFFER_POINT_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x00;
uint256 constant QUERIES_T_POLY_AGGREGATED_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0xc0;
uint256 constant QUERIES_T_POLY_AGGREGATED_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0xe0;
uint256 constant Q_MOD = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
uint256 constant REGULAR_PAGE = 0;
uint256 constant R_MOD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
uint256 constant SCRIPT_START_LOCATION = 4;
uint256 constant SECURITY_COUNCIL_MEMBERS_NUMBER = 15;
uint256 constant SECURITY_COUNCIL_MEMBERS_NUMBER = 3;
uint256 constant SECURITY_COUNCIL_THRESHOLD = 9;
uint256 constant SELECTOR_OFFSET = 0x20;
uint256 constant SELECTOR_SIZE = 4;
uint256 constant STARKEX_MINTABLE_ASSET_ID_FLAG = 1<<250;
uint256 constant STATE_ALPHA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x000;
uint256 constant STATE_BETA_GAMMA_PLUS_GAMMA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x1c0;
uint256 constant STATE_BETA_LOOKUP_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x160;
uint256 constant STATE_BETA_PLUS_ONE_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x1a0;
uint256 constant STATE_BETA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x020;
uint256 constant STATE_ETA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x140;
uint256 constant STATE_GAMMA_LOOKUP_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x180;
uint256 constant STATE_GAMMA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x040;
uint256 constant STATE_L_0_AT_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x260;
uint256 constant STATE_L_N_MINUS_ONE_AT_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x280;
uint256 constant STATE_OFFSET_FUNDING = 5;
uint256 constant STATE_OFFSET_N_FUNDING = 4;
uint256 constant STATE_OFFSET_ORDERS_HEIGHT = 3;
uint256 constant STATE_OFFSET_ORDERS_ROOT = 2;
uint256 constant STATE_OFFSET_VAULTS_HEIGHT = 1;
uint256 constant STATE_OFFSET_VAULTS_ROOT = 0;
uint256 constant STATE_POWER_OF_ALPHA_2_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x060;
uint256 constant STATE_POWER_OF_ALPHA_3_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x080;
uint256 constant STATE_POWER_OF_ALPHA_4_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x0a0;
uint256 constant STATE_POWER_OF_ALPHA_5_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x0c0;
uint256 constant STATE_POWER_OF_ALPHA_6_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x0e0;
uint256 constant STATE_POWER_OF_ALPHA_7_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x100;
uint256 constant STATE_POWER_OF_ALPHA_8_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x120;
uint256 constant STATE_U_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x200;
uint256 constant STATE_V_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x1e0;
uint256 constant STATE_Z_IN_DOMAIN_SIZE = 0x200 + 0x520 + 0x620 + 0x80 + 0x2a0;
uint256 constant STATE_Z_MINUS_LAST_OMEGA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x240;
uint256 constant STATE_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x220;
uint256 constant TIME_TO_WITHDRAW_FUNDS_FROM_FULL_EXIT = 2 days;
uint256 constant TOKEN_CONTRACT_ADDRESS_OFFSET = SELECTOR_OFFSET + SELECTOR_SIZE;
uint256 constant TRANSCRIPT_BEGIN_SLOT = 0x200 + 0x520 + 0x620 + 0x00;
uint256 constant TRANSCRIPT_CHALLENGE_SLOT = 0x200 + 0x520 + 0x620 + 0x44;
uint256 constant TRANSCRIPT_DST_BYTE_SLOT = 0x200 + 0x520 + 0x620 + 0x03;
uint256 constant TRANSCRIPT_STATE_0_SLOT = 0x200 + 0x520 + 0x620 + 0x04;
uint256 constant TRANSCRIPT_STATE_1_SLOT = 0x200 + 0x520 + 0x620 + 0x24;
uint256 constant TRANSFER_BYTES = 2 * CHUNK_BYTES;
uint256 constant TRANSFER_TO_NEW_BYTES = 6 * CHUNK_BYTES;
uint256 constant TREE_DEPTH = 32;
uint256 constant TREE_RADIX = 16;
uint256 constant TX_DATA_HEADER_SIZE = 3;
uint256 constant UPGRADEABLE = 2;
uint256 constant VK_GATE_SELECTORS_0_X_SLOT = 0x200 + 0x200;
uint256 constant VK_GATE_SELECTORS_0_Y_SLOT = 0x200 + 0x220;
uint256 constant VK_GATE_SELECTORS_1_X_SLOT = 0x200 + 0x240;
uint256 constant VK_GATE_SELECTORS_1_Y_SLOT = 0x200 + 0x260;
uint256 constant VK_GATE_SETUP_0_X_SLOT = 0x200 + 0x000;
uint256 constant VK_GATE_SETUP_0_Y_SLOT = 0x200 + 0x020;
uint256 constant VK_GATE_SETUP_1_X_SLOT = 0x200 + 0x040;
uint256 constant VK_GATE_SETUP_1_Y_SLOT = 0x200 + 0x060;
uint256 constant VK_GATE_SETUP_2_X_SLOT = 0x200 + 0x080;
uint256 constant VK_GATE_SETUP_2_Y_SLOT = 0x200 + 0x0a0;
uint256 constant VK_GATE_SETUP_3_X_SLOT = 0x200 + 0x0c0;
uint256 constant VK_GATE_SETUP_3_Y_SLOT = 0x200 + 0x0e0;
uint256 constant VK_GATE_SETUP_4_X_SLOT = 0x200 + 0x100;
uint256 constant VK_GATE_SETUP_4_Y_SLOT = 0x200 + 0x120;
uint256 constant VK_GATE_SETUP_5_X_SLOT = 0x200 + 0x140;
uint256 constant VK_GATE_SETUP_5_Y_SLOT = 0x200 + 0x160;
uint256 constant VK_GATE_SETUP_6_X_SLOT = 0x200 + 0x180;
uint256 constant VK_GATE_SETUP_6_Y_SLOT = 0x200 + 0x1a0;
uint256 constant VK_GATE_SETUP_7_X_SLOT = 0x200 + 0x1c0;
uint256 constant VK_GATE_SETUP_7_Y_SLOT = 0x200 + 0x1e0;
uint256 constant VK_LOOKUP_SELECTOR_X_SLOT = 0x200 + 0x380;
uint256 constant VK_LOOKUP_SELECTOR_Y_SLOT = 0x200 + 0x3a0;
uint256 constant VK_LOOKUP_TABLE_0_X_SLOT = 0x200 + 0x3c0;
uint256 constant VK_LOOKUP_TABLE_0_Y_SLOT = 0x200 + 0x3e0;
uint256 constant VK_LOOKUP_TABLE_1_X_SLOT = 0x200 + 0x400;
uint256 constant VK_LOOKUP_TABLE_1_Y_SLOT = 0x200 + 0x420;
uint256 constant VK_LOOKUP_TABLE_2_X_SLOT = 0x200 + 0x440;
uint256 constant VK_LOOKUP_TABLE_2_Y_SLOT = 0x200 + 0x460;
uint256 constant VK_LOOKUP_TABLE_3_X_SLOT = 0x200 + 0x480;
uint256 constant VK_LOOKUP_TABLE_3_Y_SLOT = 0x200 + 0x4a0;
uint256 constant VK_LOOKUP_TABLE_TYPE_X_SLOT = 0x200 + 0x4c0;
uint256 constant VK_LOOKUP_TABLE_TYPE_Y_SLOT = 0x200 + 0x4e0;
uint256 constant VK_PERMUTATION_0_X_SLOT = 0x200 + 0x280;
uint256 constant VK_PERMUTATION_0_Y_SLOT = 0x200 + 0x2a0;
uint256 constant VK_PERMUTATION_1_X_SLOT = 0x200 + 0x2c0;
uint256 constant VK_PERMUTATION_1_Y_SLOT = 0x200 + 0x2e0;
uint256 constant VK_PERMUTATION_2_X_SLOT = 0x200 + 0x300;
uint256 constant VK_PERMUTATION_2_Y_SLOT = 0x200 + 0x320;
uint256 constant VK_PERMUTATION_3_X_SLOT = 0x200 + 0x340;
uint256 constant VK_PERMUTATION_3_Y_SLOT = 0x200 + 0x360;
uint256 constant VK_RECURSIVE_FLAG_SLOT = 0x200 + 0x500;
uint256 constant WITHDRAWAL_GAS_LIMIT = 100000;
uint256 constant WITHDRAWAL_NFT_GAS_LIMIT = 300000;
uint256 constant WITHDRAW_NFT_BYTES = 10 * CHUNK_BYTES;
uint256 constant _DEPOSIT_CONTRACT_TREE_DEPTH = 32;
uint256 constant _DONE_TIMESTAMP = uint256(1);
uint256 constant _EXIT_TREE_DEPTH = 32;
uint256 constant _MAX_BATCH_FEE = 1000 ether;
uint256 constant _MAX_BATCH_MULTIPLIER = 12;
uint256 constant _MAX_FORCE_BATCH_BYTE_LENGTH = 5000;
uint256 constant _MAX_TRANSACTIONS_BYTE_LENGTH = 120000;
uint256 constant _MIN_BATCH_FEE = 1 gwei;
uint256 constant AMOUNT_DEFAULT_CONTEXT = type(uint256).max;
uint256 constant BLOCK_TIMESTAMP_EXPIRATION = 0;
uint256 constant BODY_OFFSET = 77;
uint256 constant DESTINATION_OFFSET = 41;
uint256 constant FP_SCALING_FACTOR = 10**18;
uint256 constant INBOX_NUM = 2;
uint256 constant LEAF_SIZE = 32;
uint256 constant LOCK_FLAG_ADDRESS = 0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4;
uint256 constant LOCK_FLAG_ADDRESS = 0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4; // keccak256("ReentrancyGuard") - 1;
uint256 constant MAX_CHALLENGE_DEGREE = 40;
uint256 constant MAX_LEN = 10;
uint256 constant MAX_UINT256 = 2**256 - 1;
uint256 constant MAX_UINT64 = uint64(-1);
uint256 constant MERKLE_INDEX_OFFSET = 32;
uint256 constant MERKLE_PROOF_OFFSET = 68;
uint256 constant MERKLE_ROOT_OFFSET = 0;
uint256 constant NONCE_OFFSET = 1;
uint256 constant ORIGIN_MAILBOX_OFFSET = 36;
uint256 constant ORIGIN_OFFSET = 5;
uint256 constant RECIPIENT_OFFSET = 45;
uint256 constant SENDER_OFFSET = 9;
uint256 constant SIGNATURES_OFFSET = 1093;
uint256 constant SIGNATURE_LENGTH = 65;
uint256 constant SINGLE_CAPACITOR = 1;
uint256 constant THRESHOLD_OFFSET = 1092;
uint256 constant UINT_MAX = ~uint256(0);
uint256 constant VERSION_OFFSET = 0;
uint256 constant _ENTERED = 2;
uint256 constant _GLOBAL_INDEX_MAINNET_FLAG = 2 ** 64;
uint256 constant _MAX_LEAFS_PER_NETWORK = 2 ** 32;
uint256 constant _NOT_ENTERED = 1;
uint256 constant _PAUSED = 3;
uint256 constant DEPOSIT_CANCEL_DELAY = 2 days;
uint256 constant DEPOSIT_CANCEL_DELAY = 7 days;
uint256 constant FREEZE_GRACE_PERIOD = 14 days;
uint256 constant FREEZE_GRACE_PERIOD = 7 days;
uint256 constant HANDLE_GAS_AMOUNT = 50_000;
uint256 constant HEADER_LENGTH = 40;
uint256 constant L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT = 800;
uint256 constant L2_GAS_LIMIT = 2_000_000;
uint256 constant MAX_FORCED_ACTIONS_REQS_PER_BLOCK = 10;
uint256 constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;
uint256 constant MAX_ROLLUP_TX_SIZE = 50000;
uint256 constant MAX_TRANSFER_SIZE = 1e36;
uint256 constant MAX_UPGRADE_DELAY = 180 days;
uint256 constant MAX_VERIFIER_COUNT = uint256(64);
uint256 constant MIN_ROLLUP_TX_GAS = 100000;
uint256 constant PNT_INIT_TOTAL_SUPPLY = 96775228709640845629432729;
uint256 constant SECONDS_PER_WEEK = 604800;
uint256 constant SLOW_FILL_MAX_TOKENS_TO_SEND = 1e40;
uint256 constant UNFREEZE_DELAY = 365 days;
uint256 constant VALIDATOR_AFK_BLOCKS = 45818;
uint256 constant VERIFIER_REMOVAL_DELAY = FREEZE_GRACE_PERIOD + (21 days);
uint256 constant VERSION = 0;
uint256 constant ancillaryBytesLimit = 8192;
uint256 constant l2MaxSubmissionCost = 0.01e18;
uint256 constant l2MaxSubmission_Cost = 0.01e1_8;
uint256 constant minAllowedPacketLength = 1;
uint32 constant DST_0 = 0;
uint32 constant DST_1 = 1;
uint32 constant DST_CHALLENGE = 2;
uint32 constant MAX_ACCOUNT_ID = 16777215;
uint32 constant MAX_AMOUNT_OF_REGISTERED_TOKENS = 1023;
uint32 constant MAX_FUNGIBLE_TOKEN_ID = 65535;
uint32 constant RECEIVE_DEFAULT_GAS_LIMIT = 200_000;
uint32 constant SPECIAL_ACCOUNT_ID = 16777215;
uint32 constant SPECIAL_NFT_TOKEN_ID = 2147483646;
uint32 constant _MAINNET_NETWORK_ID = 0;
uint32 constant _ZKEVM_NETWORK_ID = 1;
uint32 constant RELAY_MESSAGE_L2_GAS_LIMIT = 2_000_000;
uint32 constant RELAY_TOKENS_L2_GAS_LIMIT = 300_000;
uint64 constant GENESIS_NODE = 0;
uint64 constant MAX_PRIORITY_REQUESTS_TO_DELETE_IN_VERIFY = 6;
uint64 constant RECEIVE_DEFAULT_GAS_LIMIT = 100_000;
uint64 constant _HALT_AGGREGATION_TIMEOUT = 1 weeks;
uint64 constant _MAX_VERIFY_BATCHES = 1000;
uint64 constant DELAYED_HEADER_LEN = 112 + 1;
uint64 constant INBOX_HEADER_LEN = 40;
uint64 constant PAGE_SIZE = 65536;
uint64 constant MIN_GAS_CALLDATA_OVERHEAD = 16;
uint64 constant MIN_GAS_CONSTANT_OVERHEAD = 200_000;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 1000;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 63;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 1016;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 64;
uint64 constant RELAY_CALL_OVERHEAD = 40_000;
uint64 constant RELAY_CONSTANT_OVERHEAD = 200_000;
uint64 constant RELAY_GAS_CHECK_BUFFER = 5_000;
uint64 constant RELAY_RESERVED_GAS = 40_000;
uint8 constant ACCOUNT_ID_BYTES = 4;
uint8 constant ADDRESS_BYTES = 20;
uint8 constant ADDRESS_FOOTPRINT_OFFSET = 0;
uint8 constant ADDRESS_SIZE_BITS = 160;
uint8 constant AMOUNT_BYTES = 16;
uint8 constant CREATOR_ID_FOOTPRINT_OFFSET = ADDRESS_FOOTPRINT_OFFSET + ADDRESS_SIZE_BITS;
uint8 constant CREATOR_ID_SIZE_BITS = 32;
uint8 constant FEE_BYTES = 2;
uint8 constant LIST_LONG_START = 0xf8;
uint8 constant LIST_SHORT_START = 0xc0;
uint8 constant NONCE_BYTES = 4;
uint8 constant PUBKEY_BYTES = 32;
uint8 constant PUBKEY_HASH_BYTES = 20;
uint8 constant SERIAL_ID_FOOTPRINT_OFFSET = CREATOR_ID_FOOTPRINT_OFFSET + CREATOR_ID_SIZE_BITS;
uint8 constant SERIAL_ID_SIZE_BITS = 32;
uint8 constant SIGNATURE_BYTES = 64;
uint8 constant STRING_LONG_START = 0xb8;
uint8 constant STRING_SHORT_START = 0x80;
uint8 constant TOKEN_BYTES = 2;
uint8 constant VK_MAX_INDEX = 3;
uint8 constant WORD_SIZE = 32;
uint8 constant ACCOUNT_ID_BYTES = 4;
uint8 constant ADDRESS_BYTES = 20;
uint8 constant AMOUNT_BYTES = 16;
uint8 constant BLOCK_NUMBER_PARAM_ID = 200;
uint8 constant CHUNK_BYTES = 10;
uint8 constant CONFIRM_NODE_EVENT = 1;
uint8 constant CONTENT_HASH_BYTES = 32;
uint8 constant CREATE_NODE_EVENT = 0;
uint8 constant ETH_SIGN_RS_BYTES = 32;
uint8 constant FEE_BYTES = 2;
uint8 constant INITIALIZATION_MSG_TYPE = 11;
uint8 constant LOGIC_OP_PARAM_ID     = 204;
uint8 constant MAX_SEND_COUNT = 100;
uint8 constant NFT_SERIAL_ID_BYTES = 4;
uint8 constant NONCE_BYTES = 4;
uint8 constant OLD_KEY_RETENTION = 16;
uint8 constant OP_TYPE_BYTES = 1;
uint8 constant ORACLE_PARAM_ID       = 203;
uint8 constant PARAM_VALUE_PARAM_ID  = 205;
uint8 constant PREFIX_EXTENSION_EVEN = 0;
uint8 constant PREFIX_EXTENSION_ODD = 1;
uint8 constant PREFIX_LEAF_EVEN = 2;
uint8 constant PREFIX_LEAF_ODD = 3;
uint8 constant PUBKEY_BYTES = 32;
uint8 constant PUBKEY_HASH_BYTES = 20;
uint8 constant REJECT_NODE_EVENT = 2;
uint8 constant ROLLUP_PROTOCOL_EVENT_TYPE = 8;
uint8 constant SIGNATURE_BYTES = 64;
uint8 constant STAKE_CREATED_EVENT = 3;
uint8 constant SUCCESS_FLAG_BYTES = 1;
uint8 constant SendType_sendTxToL1 = 3;
uint8 constant TIMESTAMP_PARAM_ID    = 201;
uint8 constant TOKEN_BYTES = 4;
uint8 constant _ENTERED = 2;
uint8 constant _NOT_ENTERED = 1;
uint8 constant ADDRESS_LENGTH = 20;
uint8 constant EXECUTION_PERIOD_FALLBACK_DIVISOR = 2;
uint8 constant _ADDRESS_LENGTH = 20;
uint8 constant _LEAF_TYPE_ASSET = 0;
uint8 constant _LEAF_TYPE_MESSAGE = 1;
uint8 constant INITIALIZE_TX_BRIDGE_LIST_LEN_LEN = 0xf9;
uint8 constant SHARED_DECIMALS = 6;
uint8 constant SIGNATURE_INITIALIZE_TX_V = 27;
uint8 constant VERSION = 0;
uint8 constant moduleType = 0;
uint8 constant moduleType = 3;
uint96 constant L1BLOCK_DEFAULT_CONTEXT = type(uint96).max;
address constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;
address constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;
address constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;
address constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;
address constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;
address constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;
address constant L2_STANDARD_TOKEN_FACTORY = 0x4200000000000000000000000000000000000012;
address constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;
address constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;
address constant PROXY_EOA = 0x4200000000000000000000000000000000000009;
address constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;
address payable constant OVM_ETH = payable(0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000);
bytes constant EIP712_VERSION = '1';
bytes1 constant RLP_NULL = bytes1(0x80);
bytes16 constant alphabet = '0123456789abcdef';
bytes29 constant NULL = hex"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("diamond.standard.diamond.storage");
bytes32 constant ENS_ORACLE_SUBNAME = keccak256("oracle");
bytes32 constant ENS_TOKEN_SUBNAME = keccak256("link");
bytes32 constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
bytes32 constant EMPTY_HASH = keccak256("");
bytes32 constant Z_0 = hex"0000000000000000000000000000000000000000000000000000000000000000";
bytes32 constant Z_1 = hex"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5";
bytes32 constant Z_10 = hex"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5";
bytes32 constant Z_11 = hex"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892";
bytes32 constant Z_12 = hex"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c";
bytes32 constant Z_13 = hex"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb";
bytes32 constant Z_14 = hex"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc";
bytes32 constant Z_15 = hex"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2";
bytes32 constant Z_16 = hex"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f";
bytes32 constant Z_17 = hex"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a";
bytes32 constant Z_18 = hex"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0";
bytes32 constant Z_19 = hex"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0";
bytes32 constant Z_2 = hex"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30";
bytes32 constant Z_20 = hex"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2";
bytes32 constant Z_21 = hex"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9";
bytes32 constant Z_22 = hex"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377";
bytes32 constant Z_23 = hex"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652";
bytes32 constant Z_24 = hex"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef";
bytes32 constant Z_25 = hex"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d";
bytes32 constant Z_26 = hex"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0";
bytes32 constant Z_27 = hex"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e";
bytes32 constant Z_28 = hex"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e";
bytes32 constant Z_29 = hex"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322";
bytes32 constant Z_3 = hex"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85";
bytes32 constant Z_30 = hex"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735";
bytes32 constant Z_31 = hex"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9";
bytes32 constant Z_32 = hex"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757";
bytes32 constant Z_4 = hex"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344";
bytes32 constant Z_5 = hex"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d";
bytes32 constant Z_6 = hex"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968";
bytes32 constant Z_7 = hex"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83";
bytes32 constant Z_8 = hex"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af";
bytes32 constant Z_9 = hex"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0";
bytes32 constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;
bytes32 constant CALLBACK_REGISTERS_SLOT = 0x5da136eb38f8d8e354915fc8a767c0dc81d49de5fb65d5477122a82ddd976240;
bytes32 constant GOVENOR_OF_SLOT = 0x8400683eb2cb350596d73644c0c89fe45f108600003457374f4ab3e87b4f3aa3;
bytes32 constant GOVERNOR_SET_SLOT = 0x546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c;
bytes32 constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;
bytes32 constant ADD_EXECUTOR_ROLE = keccak256('ADD_EXECUTOR_ROLE');
bytes32 constant BORROWER_ADMIN_ROLE = keccak256('BORROWER_ADMIN_ROLE');
bytes32 constant CLAIM_OPERATOR_ROLE = keccak256('CLAIM_OPERATOR_ROLE');
bytes32 constant CONFIG_UPDATER_ROLE = keccak256('CONFIG_UPDATER_ROLE');
bytes32 constant DEBT_OPERATOR_ROLE = keccak256('DEBT_OPERATOR_ROLE');
bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;
bytes32 constant EMERGENCY_ROLE = keccak256("EMERGENCY_ROLE");
bytes32 constant EPOCH_PARAMETERS_ROLE = keccak256('EPOCH_PARAMETERS_ROLE');
bytes32 constant FINALIZED_HASH = 0x0000000000000000000000000000000000000000000000000000000000000001;
bytes32 constant INFO_TYPE_HASH = 0x1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d;
bytes32 constant MAKER_ROLE = keccak256("MAKER_ROLE");
bytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');
bytes32 constant OWNER_TYPE_HASH = 0x353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764;
bytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');
bytes32 constant REWARDS_RATE_ROLE = keccak256('REWARDS_RATE_ROLE');
bytes32 constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;
bytes32 constant SENTRY_ROLE = keccak256("SENTRY_ROLE");
bytes32 constant SLASHER_ROLE = keccak256('SLASHER_ROLE');
bytes32 constant STAKE_OPERATOR_ROLE = keccak256('STAKE_OPERATOR_ROLE');
bytes32 constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;
bytes32 constant TYPE_HASH = 0xb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea;
bytes32 constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;
bytes32 constant UNPAUSER_ROLE = keccak256('UNPAUSER_ROLE');
bytes32 constant WITHDRAWAL_UNLOCKER_ROLE = keccak256("WITHDRAWAL_UNLOCKER_ROLE");
string constant NAME = 'Wrapped Ethereum DYDX';
string constant SYMBOL = 'wethDYDX';
string constant EIP712_DOMAIN_NAME = 'dYdX Governance';
string constant EIP712_DOMAIN_NAME = 'dYdX Safety Module';
string constant EIP712_DOMAIN_VERSION = '1';
uint128 constant DEQUEUE_MAX = 100;
uint16 constant AAVE_REFERRAL_CODE = 0;
uint16 constant DEFAULT_COPY_BYTES = 256;
uint16 constant INITIAL_AAVE_REFERRAL_CODE = 0;
uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;
uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;
uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;
uint256 constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
uint256 constant SNAPSHOT_DURATION = 30 minutes;
uint256 constant TREE_RADIX = 16;
uint256 constant TWENTY_SEVEN_BYTES = 8 * 27;
uint256 constant LINK_DIVISIBILITY = 10**18;
uint256 constant AMOUNT_OVERRIDE = 0;
uint256 constant OPERATOR_ARGS_VERSION = 2;
uint256 constant ORACLE_ARGS_VERSION = 1;
uint256 constant ENTERED = 2;
uint256 constant MAX_LEAVES = 2**TREE_DEPTH - 1;
uint256 constant MAX_LIST_LENGTH = 32;
uint256 constant NOT_ENTERED = 1;
uint256 constant PREFIX_LENGTH = 76;
uint256 constant REMOVE_DELAY = 7 days;
uint256 constant SHORTFALL_INDEX_BASE = 1e36;
uint256 constant TREE_DEPTH = 32;
uint256 constant ARITHMETIC_ERROR_CODE = 0x11;
uint256 constant DEFAULT_EXPIRY_DURATION = 1 << 255;
uint256 constant DIVISION_ERROR_CODE = 0x12;
uint256 constant ENTERED = uint256(int256(-1));
uint256 constant IDENTIFIER_LEN = 1;
uint256 constant INDEX_BASE = 10**18;
uint256 constant LOW_27_BYTES_MASK = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff; // (1 << _27_BYTES_IN_BITS) - 1;
uint256 constant MIN_BLACKOUT_WINDOW = 3 days;
uint256 constant NOT_ENTERED = 1;
uint256 constant PANIC_ERROR_SIGNATURE = 0x4e487b71;
uint256 constant _delay = 7 days;
uint256 constant A_PRECISION = 100;
uint256 constant BPS_FEE_DENOMINATOR = 10_000;
uint256 constant DEFAULT_DEADLINE_EXTENSION = 3600;
uint256 constant EXCHANGE_RATE_BASE = 1e18;
uint256 constant EXCHANGE_RATE_MAY_OVERFLOW = (2 ** 256 - 1) / MAX_UNDERLYING_BALANCE;
uint256 constant EXECUTE_CALLDATA_RESERVE_GAS = 10_000;
uint256 constant FEE_DENOMINATOR = 1e10;
uint256 constant FUTURE_TIME_BUFFER = 3;
uint256 constant GOVERNANCE_DELAY = 7 days;
uint256 constant INITIAL_LIQUIDITY_FEE_NUMERATOR = 9_995;
uint256 constant INITIAL_MAX_ROUTERS = 5;
uint256 constant MAXIMUM_POOLED_TOKENS = 16;
uint256 constant MAX_A = 10**6;
uint256 constant MAX_ADMIN_FEE = 1e10;
uint256 constant MAX_A_CHANGE = 2;
uint256 constant MAX_DOMAINS = 500;
uint256 constant MAX_LOOP_LIMIT = 256;
uint256 constant MAX_SLASH_DENOMINATOR = 100;
uint256 constant MAX_SLASH_NUMERATOR = 95;
uint256 constant MAX_SWAP_FEE = 1e8;
uint256 constant MAX_UNDERLYING_BALANCE = 1e28;
uint256 constant MINIMUM_POOLED_TOKENS = 2;
uint256 constant MIN_RAMP_DELAY = 1 days;
uint256 constant MIN_RAMP_TIME = 14 days;
uint256 constant ORACLE_VALID_PERIOD = 1 minutes;
uint256 constant REVISION = 1;
uint256 constant STAKE_AMOUNT_MAY_OVERFLOW = (2 ** 256 - 1) / EXCHANGE_RATE_BASE;
uint256 constant TOTAL_ALLOCATION = 1e4;
uint256 constant TRADER_SCORE_ALPHA_BASE = 10 ** 18;
uint256 constant WAITING_PERIOD = 7 days;
uint256 constant _MAX_PERCENTAGE = 1_000_000;
uint8 constant LIST_LONG_START = 0xf8;
uint8 constant LIST_SHORT_START = 0xc0;
uint8 constant PREFIX_EXTENSION_EVEN = 0;
uint8 constant PREFIX_EXTENSION_ODD = 1;
uint8 constant PREFIX_LEAF_EVEN = 2;
uint8 constant PREFIX_LEAF_ODD = 3;
uint8 constant STRING_LONG_START = 0xb8;
uint8 constant STRING_SHORT_START = 0x80;
uint8 constant WORD_SIZE = 32;
uint8 constant MAJOR_TYPE_ARRAY = 4;
uint8 constant MAJOR_TYPE_BYTES = 2;
uint8 constant MAJOR_TYPE_CONTENT_FREE = 7;
uint8 constant MAJOR_TYPE_INT = 0;
uint8 constant MAJOR_TYPE_MAP = 5;
uint8 constant MAJOR_TYPE_NEGATIVE_INT = 1;
uint8 constant MAJOR_TYPE_STRING = 3;
uint8 constant MAJOR_TYPE_TAG = 6;
uint8 constant TAG_TYPE_BIGNUM = 2;
uint8 constant TAG_TYPE_NEGATIVE_BIGNUM = 3;
uint8 constant DEFAULT_NORMALIZED_DECIMALS = uint8(18);
uint8 constant POOL_PRECISION_DECIMALS = 18;
bytes32 constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant MY_ROLE = keccak256("MY_ROLE");
address constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;
address constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;
address constant UNISWAP_L1_TIMELOCK = 0x1a9C8182C09F50C8318d769245beA52c32BE35BC;
address constant UNISWAP_L2_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;
address constant UNSAFE_CREATERETRYABLETICKET_CALLER = 0x4dC25eA85FAD2F578685A4d8E404C12164eA405B;
bytes32 constant DEFAULT_L2_LOGS_TREE_ROOT_HASH = bytes32(0);
bytes32 constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
bytes32 constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
bytes32 constant FEES_UPDATER_ROLE = keccak256("FEES_UPDATER_ROLE");
bytes32 constant FEES_UPDATE_SIG_IDENTIFIER = keccak256("FEES_UPDATE");
bytes32 constant GOVERNANCE_ROLE = keccak256("GOVERNANCE_ROLE");
bytes32 constant L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH = 0x72abee45b59e344af8a6e520241c4744aff26ed411f4c4b00f8af09adada43ba;
bytes32 constant RESCUE_ROLE = keccak256("RESCUE_ROLE");
bytes32 constant TRANSMITTER_ROLE = keccak256("TRANSMITTER_ROLE");
bytes32 constant TRIP_GLOBAL_SIG_IDENTIFIER = keccak256("TRIP_GLOBAL");
bytes32 constant TRIP_NATIVE_SIG_IDENTIFIER = keccak256("TRIP_NATIVE");
bytes32 constant TRIP_PATH_SIG_IDENTIFIER = keccak256("TRIP_PATH");
bytes32 constant TRIP_PROPOSAL_SIG_IDENTIFIER = keccak256("TRIP_PROPOSAL");
bytes32 constant TRIP_ROLE = keccak256("TRIP_ROLE");
bytes32 constant UN_TRIP_GLOBAL_SIG_IDENTIFIER = keccak256("UN_TRIP_GLOBAL");
bytes32 constant UN_TRIP_NATIVE_SIG_IDENTIFIER = keccak256("UN_TRIP_NATIVE");
bytes32 constant UN_TRIP_PATH_SIG_IDENTIFIER = keccak256("UN_TRIP_PATH");
bytes32 constant UN_TRIP_ROLE = keccak256("UN_TRIP_ROLE");
bytes32 constant WATCHER_ROLE = keccak256("WATCHER_ROLE");
bytes32 constant WITHDRAW_ROLE = keccak256("WITHDRAW_ROLE");
uint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 1 hours;
uint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 3 days;
uint256 constant ETH_POS_BLOCK_TIME = 12;
uint256 constant L1_GAS_PER_PUBDATA_BYTE = 17;
uint256 constant L1_TX_DELTA_544_ENCODING_BYTES = 1656;
uint256 constant L1_TX_DELTA_FACTORY_DEPS_L2_GAS = 2473;
uint256 constant L1_TX_DELTA_FACTORY_DEPS_PUBDATA = 64;
uint256 constant L1_TX_INTRINSIC_L2_GAS = 167157;
uint256 constant L1_TX_INTRINSIC_PUBDATA = 88;
uint256 constant L1_TX_MIN_L2_GAS_BASE = 173484;
uint256 constant L2_LOG_ADDRESS_OFFSET = 4;
uint256 constant L2_LOG_KEY_OFFSET = 24;
uint256 constant L2_LOG_VALUE_OFFSET = 56;
uint256 constant L2_TO_L1_LOG_SERIALIZE_SIZE = 88;
uint256 constant MAX_ALLOWED_PROTOCOL_VERSION_DELTA = 100;
uint256 constant MAX_DATA_SIZE = 117964;
uint256 constant MAX_GAS_PER_TRANSACTION = 80000000;
uint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 + L2_TO_L1_LOG_SERIALIZE_SIZE * 512;
uint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 * L2_TO_L1_LOG_SERIALIZE_SIZE + 512;
uint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 * L2_TO_L1_LOG_SERIALIZE_SIZE * 512;
uint256 constant MAX_NEW_FACTORY_DEPS = 32;
uint256 constant MEMORY_OVERHEAD_GAS = 10;
uint256 constant PACKED_L2_BLOCK_TIMESTAMP_MASK = 0xffffffffffffffffffffffffffffffff;
uint256 constant PRIORITY_EXPIRATION = 0 days;
uint256 constant PRIORITY_OPERATION_L2_TX_TYPE = 255;
uint256 constant PUBLIC_INPUT_SHIFT = 32;
uint256 constant REQUIRED_L2_GAS_PRICE_PER_PUBDATA = 800;
uint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;
uint256 constant SYSTEM_UPGRADE_L2_TX_TYPE = 254;
uint256 constant TX_SLOT_OVERHEAD_L2_GAS = 10000;
uint64 constant NO_CHAL_INDEX = 0;
uint8 constant INITIALIZATION_MSG_TYPE = 11;
uint8 constant L1MessageType_L2FundedByL1 = 7;
uint8 constant L1MessageType_batchPostingReport = 13;
uint8 constant L1MessageType_ethDeposit = 12;
uint8 constant L1MessageType_submitRetryableTx = 9;
uint8 constant L2MessageType_unsignedContractTx = 1;
uint8 constant L2MessageType_unsignedEOATx = 0;
uint8 constant L2_MSG = 3;
uint8 constant ROLLUP_PROTOCOL_EVENT_TYPE = 8;
bool constant IS_TRUE = true;
bool constant IS_FALSE = false;
uint8 constant Testing = (myVal * 123) + z;
// Above input, below output
IMulticall3 constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
KromaPortal constant portal = KromaPortal(payable((0x713C2BEd44eB45D490afB8D4d1aA6F12290B829a)));
Vm constant vm = Vm(VM_ADDRESS);
Vm constant vm = Vm((uint160(uint256(keccak256("hevm cheat code")))));
VmSafe constant vmSafe = VmSafe(VM_ADDRESS);
VmSafe constant vm = VmSafe((uint160(uint256(keccak256("hevm cheat code")))));
ZkBridgeLike constant zkErc20Bridge = ZkBridgeLike(0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063);
ZkSyncInterface constant zkSync = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
ZkSyncInterface constant zkSyncEthBridge = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
ZkSyncInterface constant zkSyncMessageBridge = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
address constant BASE_FEE_VAULT = 0x4200000000000000000000000000000000000019;
address constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;
address constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
address constant Create2Deployer = 0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2;
address constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD;
address constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;
address constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;
address constant DROP_XDOMAIN_MESSAGE_SENDER = 0x6f297C61B5C92eF107fFD30CD56AFFE5A273e841;
address constant DeterministicDeploymentProxy = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
address constant EAS = 0x4200000000000000000000000000000000000021;
address constant EMPTY_ACTIVEOUTBOX = (type(uint160).max);
address constant EntryPoint = 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789;
address constant GAS_PRICE_ORACLE = 0x420000000000000000000000000000000000000F;
address constant GOVERNANCE_TOKEN = 0x4200000000000000000000000000000000000042;
address constant L1_BLOCK_ATTRIBUTES = 0x4200000000000000000000000000000000000015;
address constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;
address constant L1_FEE_VAULT = 0x420000000000000000000000000000000000001A;
address constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;
address constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;
address constant L2_ERC721_BRIDGE = 0x4200000000000000000000000000000000000014;
address constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;
address constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000016;
address constant LEGACY_ERC20_ETH = 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000;
address constant LEGACY_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;
address constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;
address constant MultiCall3 = 0xcA11bde05977b3631167028862bE2a173976CA11;
address constant MultiSendCallOnly_v130 = 0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B;
address constant MultiSend_v130 = 0x998739BFdAAdde7C933B942a68053933098f9EDa;
address constant OPTIMISM_MINTABLE_ERC20_FACTORY = 0x4200000000000000000000000000000000000012;
address constant OPTIMISM_MINTABLE_ERC721_FACTORY = 0x4200000000000000000000000000000000000017;
address constant PROXY_ADMIN = 0x4200000000000000000000000000000000000018;
address constant Permit2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;
address constant SCHEMA_REGISTRY = 0x4200000000000000000000000000000000000020;
address constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;
address constant SafeL2_v130 = 0xfb1bffC9d739B8D520DaF37dF666da4C687191EA;
address constant SafeSingletonFactory = 0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7;
address constant Safe_v130 = 0x69f4D1788e39c87893C980c06EdF4b7f686e2938;
address constant SenderCreator = 0x7fc98430eAEdbb6070B35B39D798725049088348;
address constant WETH9 = 0x4200000000000000000000000000000000000006;
address constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
address constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
address constant DAO_V1_TREASURY = 0xDd92eb1478D3189707aB7F4a5aCE3a615cdD0476;
address constant DAO_V1_VOTING_CONTRACT = 0x2211bFD97b1c02aE8Ac305d206e9780ba7D8BfF4;
address constant EMPTY_ACTIVEOUTBOX = (type(uint160).max);
address constant SENDER_DEFAULT_CONTEXT = (type(uint160).max);
address constant ETHPNT_TOKEN_ADDRESS = 0xf4eA6B892853413bD9d9f1a5D3a620A0ba39c5b2;
address constant PNT_TOKEN_ADDRESS = 0x89Ab32156e46F46D02ade3FEcbe5Fc4243B9AAeD;
address constant RETRYABLE_TICKET_MAGIC = 0xa723C008e76E379c55599D2E4d93879BeaFDa79C;
address constant l2RefundL2Address = 0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010;
bytes constant ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
bytes constant sha256MultiHash = hex"1220";
bytes constant EXPLANATION_KEY = "explanation";
bytes constant INITIALIZE_TX_BRIDGE_PARAMS = hex"80808401c9c38094";
string constant a = unicode"Hello ðŸ˜ƒ";
string constant b = unicode"Hello ðŸ˜ƒ";
bytes constant PROPOSAL_HASH_KEY = "proposalHash";
bytes constant RULES_KEY = "rules";
bytes constant arithmeticError = abi.encodeWithSignature("Panic(uint256)", 0x11);
bytes constant assertionError = abi.encodeWithSignature("Panic(uint256)", 0x01);
bytes constant divisionError = abi.encodeWithSignature("Panic(uint256)", 0x12);
bytes constant encodeStorageError = abi.encodeWithSignature("Panic(uint256)", 0x22);
bytes constant enumConversionError = abi.encodeWithSignature("Panic(uint256)", 0x21);
bytes constant indexOOBError = abi.encodeWithSignature("Panic(uint256)", 0x32);
bytes constant memOverflowError = abi.encodeWithSignature("Panic(uint256)", 0x41);
bytes constant popError = abi.encodeWithSignature("Panic(uint256)", 0x31);
bytes constant zeroVarError = abi.encodeWithSignature("Panic(uint256)", 0x51);
bytes1 constant MSG_ROOT = 0;
bytes1 constant DATA_AUTHENTICATED_FLAG = 0x40;
bytes1 constant INITIALIZE_TX_EFFECTIVE_PERCENTAGE = 0xFF;
bytes13 constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;
bytes13 constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;
bytes15 constant SUFFIX = hex"5af43d82803e903d91602b57fd5bf3";
bytes16 constant HEX_DIGITS = "0123456789abcdef";
bytes16 constant _HEX_SYMBOLS = "0123456789abcdef";
bytes16 constant _SYMBOLS = "0123456789abcdef";
bytes20 constant PREFIX = hex"3d602d80600a3d3981f3363d3d373d3d3d363d73";
bytes32 constant CREATE2_PREFIX = keccak256("zksyncCreate2");
bytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b; // keccak256("diamond.standard.diamond.storage") - 1;
bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("diamond.standard.diamond.storage");
bytes32 constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
bytes32 constant IMPLEMENTATION_KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant OWNER_KEY = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant Erc777Token_INTERFACE_HASH = keccak256("ERC777Token");
bytes32 constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");
bytes32 constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;
bytes32 constant APP_ID_POSITION = keccak256("aragonOS.appStorage.appId");
bytes32 constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
bytes32 constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;
bytes32 constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;
bytes32 constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash("evmreg");
bytes32 constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;
bytes32 constant EXECUTOR_TYPE = keccak256("CALLS_SCRIPT");
bytes32 constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;
bytes32 constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;
bytes32 constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;
bytes32 constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;
bytes32 constant KERNEL_APP_ADDR_NAMESPACE = keccak256("app");
bytes32 constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;
bytes32 constant KERNEL_APP_BASES_NAMESPACE = keccak256("base");
bytes32 constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;
bytes32 constant KERNEL_CORE_APP_ID = apmNamehash("kernel");
bytes32 constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;
bytes32 constant KERNEL_CORE_NAMESPACE = keccak256("core");
bytes32 constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;
bytes32 constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash("acl");
bytes32 constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;
bytes32 constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash("vault");
bytes32 constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;
bytes32 constant KERNEL_POSITION = keccak256("aragonOS.appStorage.kernel");
bytes32 constant KEY_ADMIN_EPOCH = keccak256("admin-epoch");
bytes32 constant KEY_ALL_TOKENS_FROZEN = keccak256("all-tokens-frozen");
bytes32 constant KEY_GOVERNANCE = bytes32(0xabea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f909);
bytes32 constant KEY_IMPLEMENTATION = bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);
bytes32 constant KEY_MINT_LIMITER = bytes32(0x627f0c11732837b3240a2de89c0b6343512886dd50978b99c76a68c6416a4d92);
bytes32 constant KEY_OPERATOR_EPOCH = keccak256("operator-epoch");
bytes32 constant KEY_OWNER_EPOCH = keccak256("owner-epoch");
bytes32 constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;
bytes32 constant PREFIX_ADMIN = keccak256("admin");
bytes32 constant PREFIX_ADMIN_COUNT = keccak256("admin-count");
bytes32 constant PREFIX_ADMIN_THRESHOLD = keccak256("admin-threshold");
bytes32 constant PREFIX_ADMIN_VOTED = keccak256("admin-voted");
bytes32 constant PREFIX_ADMIN_VOTE_COUNTS = keccak256("admin-vote-counts");
bytes32 constant PREFIX_COMMAND_EXECUTED = keccak256("command-executed");
bytes32 constant PREFIX_CONTRACT_CALL_APPROVED = keccak256("contract-call-approved");
bytes32 constant PREFIX_CONTRACT_CALL_APPROVED_WITH_MINT = keccak256("contract-call-approved-with-mint");
bytes32 constant PREFIX_IS_ADMIN = keccak256("is-admin");
bytes32 constant PREFIX_IS_OPERATOR = keccak256("is-operator");
bytes32 constant PREFIX_IS_OWNER = keccak256("is-owner");
bytes32 constant PREFIX_OPERATOR = keccak256("operator");
bytes32 constant PREFIX_OPERATOR_COUNT = keccak256("operator-count");
bytes32 constant PREFIX_OPERATOR_THRESHOLD = keccak256("operator-threshold");
bytes32 constant PREFIX_OWNER = keccak256("owner");
bytes32 constant PREFIX_OWNER_COUNT = keccak256("owner-count");
bytes32 constant PREFIX_OWNER_THRESHOLD = keccak256("owner-threshold");
bytes32 constant PREFIX_TIME_LOCK = keccak256("time-lock");
bytes32 constant PREFIX_TOKEN_ADDRESS = keccak256("token-address");
bytes32 constant PREFIX_TOKEN_FROZEN = keccak256("token-frozen");
bytes32 constant PREFIX_TOKEN_MINT_AMOUNT = keccak256("token-mint-amount");
bytes32 constant PREFIX_TOKEN_MINT_LIMIT = keccak256("token-mint-limit");
bytes32 constant PREFIX_TOKEN_TYPE = keccak256("token-type");
bytes32 constant PROXY_OWNER_ADDRESS = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant REENTRANCY_MUTEX_POSITION = keccak256("aragonOS.reentrancyGuard.mutex");
bytes32 constant SELECTOR_APPROVE_CONTRACT_CALL = keccak256("approveContractCall");
bytes32 constant SELECTOR_APPROVE_CONTRACT_CALL_WITH_MINT = keccak256("approveContractCallWithMint");
bytes32 constant SELECTOR_BURN_TOKEN = keccak256("burnToken");
bytes32 constant SELECTOR_DEPLOY_TOKEN = keccak256("deployToken");
bytes32 constant SELECTOR_MINT_TOKEN = keccak256("mintToken");
bytes32 constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256("transferOperatorship");
bytes32 constant SELECTOR_TRANSFER_OWNERSHIP = keccak256("transferOwnership");
bytes32 constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
bytes32 constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant _OWNER_SLOT = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;
bytes32 constant _SET_FEE_ROLE = keccak256("SET_FEE_ROLE");
bytes32 constant CHILD_CHAIN = keccak256("childChain");
bytes32 constant CREATE2_PREFIX = keccak256("zksyncCreate2");
bytes32 constant DEPOSIT_MANAGER = keccak256("depositManager");
bytes32 constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;
bytes32 constant DOMAIN_TYPE_SIGNATURE_HASH = bytes32(
    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f
);
bytes32 constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
bytes32 constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;
bytes32 constant KEY_ALL_TOKENS_FROZEN = keccak256("all-tokens-frozen");
bytes32 constant OUTPUTID_DEFAULT_CONTEXT = bytes32(type(uint256).max);
bytes32 constant PERMIT_SIGNATURE_HASH = bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9);
bytes32 constant PREFIX_TOKEN_FROZEN = keccak256("token-frozen");
bytes32 constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;
bytes32 constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;
bytes32 constant SLASHING_MANAGER = keccak256("slashingManager");
bytes32 constant STAKE_MANAGER = keccak256("stakeManager");
bytes32 constant STATE_SENDER = keccak256("stateSender");
bytes32 constant VALIDATOR_SHARE = keccak256("validatorShare");
bytes32 constant WETH_TOKEN = keccak256("wethToken");
bytes32 constant WITHDRAW_MANAGER = keccak256("withdrawManager");
bytes32 constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
bytes32 constant _HASHED_NAME = keccak256("Permit2");
bytes32 constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;
bytes32 constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId)");
bytes32 constant _TYPE_HASH = keccak256(
    "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
);
bytes32 constant masterPosition = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant targetPosition = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
bytes32 constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;
bytes32 constant APP_MANAGER_ROLE = keccak256("APP_MANAGER_ROLE");
bytes32 constant Bridge = "Bridge";
bytes32 constant CANCELLER_ROLE = keccak256("CANCELLER_ROLE");
bytes32 constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;
bytes32 constant CREATE_PERMISSIONS_ROLE = keccak256("CREATE_PERMISSIONS_ROLE");
bytes32 constant CREATE_VOTES_ROLE = keccak256("CREATE_VOTES_ROLE");
bytes32 constant ChildMessenger = "ChildMessenger";
bytes32 constant CollateralWhitelist = "CollateralWhitelist";
bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;
bytes32 constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;
bytes32 constant EMPTY_PARAM_HASH = keccak256(uint256(0));
bytes32 constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
bytes32 constant FinancialContractsAdmin = "FinancialContractsAdmin";
bytes32 constant GUARDIAN_SLOT = bytes32(uint256(keccak256("superchainConfig.guardian")) - 1);
bytes32 constant GenericHandler = "GenericHandler";
bytes32 constant IdentifierWhitelist = "IdentifierWhitelist";
bytes32 constant MINTER_ROLE = keccak256("MINTER_ROLE");
bytes32 constant MODIFY_BUFFER_BLOCKS_ROLE = keccak256("MODIFY_BUFFER_BLOCKS_ROLE");
bytes32 constant MODIFY_EXECUTION_DELAY_ROLE = keccak256("MODIFY_EXECUTION_DELAY_ROLE");
bytes32 constant MODIFY_MIN_OPEN_VOTE_AMOUNT_ROLE = keccak256("MODIFY_MIN_OPEN_VOTE_AMOUNT_ROLE");
bytes32 constant MODIFY_QUORUM_ROLE = keccak256("MODIFY_QUORUM_ROLE");
bytes32 constant MODIFY_SUPPORT_ROLE = keccak256("MODIFY_SUPPORT_ROLE");
bytes32 constant NO_PERMISSION = bytes32(0);
bytes32 constant OP_ADD = keccak256("OP_ADD");
bytes32 constant OP_SUB = keccak256("OP_SUB");
bytes32 constant OptimisticOracle = "OptimisticOracle";
bytes32 constant OptimisticOracleV2 = "OptimisticOracleV2";
bytes32 constant OptimisticOracleV3 = "OptimisticOracleV3";
bytes32 constant Oracle = "Oracle";
bytes32 constant OracleHub = "OracleHub";
bytes32 constant OracleSpoke = "OracleSpoke";
bytes32 constant PAUSED_SLOT = bytes32(uint256(keccak256("superchainConfig.paused")) - 1);
bytes32 constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");
bytes32 constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;
bytes32 constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256("REGISTRY_ADD_EXECUTOR_ROLE");
bytes32 constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;
bytes32 constant REGISTRY_MANAGER_ROLE = keccak256("REGISTRY_MANAGER_ROLE");
bytes32 constant ROLE_GIRAFFE = keccak256("ROLE_GIRAFFE");
bytes32 constant ROLE_HIPPO = keccak256("ROLE_HIPPO");
bytes32 constant Registry = "Registry";
bytes32 constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;
bytes32 constant SkinnyOptimisticOracle = "SkinnyOptimisticOracle";
bytes32 constant Store = "Store";
bytes32 constant TIMELOCK_ADMIN_ROLE = keccak256("TIMELOCK_ADMIN_ROLE");
bytes32 constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256("systemconfig.unsafeblocksigner");
bytes32 constant _PING = keccak256("PING");
bytes32 constant _PONG = keccak256("PONG");
bytes32 constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256("TokenPermissions(address token,uint256 amount)");
bytes32 constant defaultIdentifier = "ASSERT_TRUTH";
bytes4 constant EIP1271_MAGIC_VALUE = 0x20c13b0b;
bytes4 constant ERC20_SELECTOR = bytes4(keccak256("ERC20Token(address)"));
bytes4 constant ERC721_SELECTOR = bytes4(keccak256("ERC721Token(address,uint256)"));
bytes4 constant ETH_SELECTOR = bytes4(keccak256("ETH()"));
bytes4 constant TRANSFER_SELECTOR = 0xa9059cbb;
bytes4 constant _ERC721_RECEIVED = 0x150b7a02;
bytes4 constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
bytes4 constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
bytes4 constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
bytes4 constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
bytes4 constant _INTERFACE_ID_INVALID = 0xffffffff;
bytes4 constant _PERMIT_SIGNATURE = 0xd505accf;
bytes4 constant _PERMIT_SIGNATURE_DAI = 0x8fcbaf0c;
int256 constant _INT256_MIN = --2 ** 255;
int256 constant _INT256_MIN = 2-- ** 255;
int256 constant INT256_MIN = --57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant _INT256_MIN = ++2 ** 255;
int256 constant INT256_MIN = --57896044618658097711785492504343953926634992332820282019728792003956564819968;

int256 constant _INT256_MIN = -2 ** 255;
int256 constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant _INT256_MIN = ~2 ** 255;
int256 constant INT256_MIN = ~57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant _INT256_MIN = !2 ** 255;
int256 constant INT256_MIN = !57896044618658097711785492504343953926634992332820282019728792003956564819968;
int256 constant SFP_SCALING_FACTOR = 10 ** 18;
string constant BLUE = "\u001b[94m";
string constant BOLD = "\u001b[1m";
string constant CYAN = "\u001b[96m";
string constant DIM = "\u001b[2m";
string constant GOVERNANCE_TAG = "STARKWARE_DEFAULT_GOVERNANCE_INFO";
string constant GREEN = "\u001b[92m";
string constant INVERSE = "\u001b[7m";
string constant ITALIC = "\u001b[3m";
string constant L1L2_MESSAGE_MAP_TAG = "STARKNET_1.0_MSGING_L1TOL2_MAPPPING_V2";
string constant L1L2_MESSAGE_NONCE_TAG = "STARKNET_1.0_MSGING_L1TOL2_NONCE";
string constant L2L1_MESSAGE_MAP_TAG = "STARKNET_1.0_MSGING_L2TOL1_MAPPPING";
string constant MAGENTA = "\u001b[95m";
string constant OPERATORS_MAPPING_TAG = "STARKNET_1.0_ROLES_OPERATORS_MAPPING_TAG";
string constant RED = "\u001b[91m";
string constant RESET = "\u001b[0m";
string constant STARKNET_GOVERNANCE_INFO_TAG = "STARKNET_1.0_GOVERNANCE_INFO";
string constant STORAGE_TAG = "STARKWARE_CONTRACTS_GOVERENED_FINALIZABLE_1.0_TAG";
string constant UNDERLINE = "\u001b[4m";
string constant YELLOW = "\u001b[93m";
string constant BRIDGED_TOKEN_TAG = "STARKNET_ERC20_TOKEN_BRIDGE_TOKEN_ADDRESS";
string constant BRIDGE_IS_ACTIVE_TAG = "STARKNET_TOKEN_BRIDGE_IS_ACTIVE";
string constant CONFIG_HASH_TAG = "STARKNET_1.0_STARKNET_CONFIG_HASH";
string constant DEPOSITOR_ADDRESSES_TAG = "STARKNET_TOKEN_BRIDGE_DEPOSITOR_ADDRESSES";
string constant L2_TOKEN_TAG = "STARKNET_TOKEN_BRIDGE_L2_TOKEN_CONTRACT";
string constant MAX_DEPOSIT_TAG = "STARKNET_TOKEN_BRIDGE_MAX_DEPOSIT";
string constant MAX_TOTAL_BALANCE_TAG = "STARKNET_TOKEN_BRIDGE_MAX_TOTAL_BALANCE";
string constant MESSAGING_CONTRACT_TAG = "STARKNET_TOKEN_BRIDGE_MESSAGING_CONTRACT";
string constant MINTABLE_PREFIX = "MINTABLE:";
string constant NFT_ASSET_ID_PREFIX = "NFT:";
string constant PROGRAM_HASH_TAG = "STARKNET_1.0_INIT_PROGRAM_HASH_UINT";
string constant STATE_STRUCT_TAG = "STARKNET_1.0_INIT_STARKNET_STATE_STRUCT";
string constant VERIFIER_ADDRESS_TAG = "STARKNET_1.0_INIT_VERIFIER_ADDRESS";
string constant name = "ZkSync";
string constant version = "1.0";
string constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = "\x19\x01";
string constant ERROR_ADD_OVERFLOW = "MATH64_ADD_OVERFLOW";
string constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";
string constant ERROR_ALREADY_INITIALIZED = "INIT_ALREADY_INITIALIZED";
string constant ERROR_APP_NOT_CONTRACT = "KERNEL_APP_NOT_CONTRACT";
string constant ERROR_AUTH_FAILED = "APP_AUTH_FAILED";
string constant ERROR_AUTH_FAILED = "KERNEL_AUTH_FAILED";
string constant ERROR_AUTH_INIT_KERNEL = "ACL_AUTH_INIT_KERNEL";
string constant ERROR_AUTH_NO_MANAGER = "ACL_AUTH_NO_MANAGER";
string constant ERROR_BLACKLISTED_CALL = "EVMCALLS_BLACKLISTED_CALL";
string constant ERROR_CALL_REVERTED = "EVMCALLS_CALL_REVERTED";
string constant ERROR_CAN_NOT_EXECUTE = "DANDELION_VOTING_CAN_NOT_EXECUTE";
string constant ERROR_CAN_NOT_FORWARD = "DANDELION_VOTING_CAN_NOT_FORWARD";
string constant ERROR_CAN_NOT_OPEN_VOTE = "DANDELION_VOTING_CAN_NOT_OPEN_VOTE";
string constant ERROR_CAN_NOT_VOTE = "DANDELION_VOTING_CAN_NOT_VOTE";
string constant ERROR_CHANGE_QUORUM_PCTS = "DANDELION_VOTING_CHANGE_QUORUM_PCTS";
string constant ERROR_CHANGE_SUPPORT_PCTS = "DANDELION_VOTING_CHANGE_SUPPORT_PCTS";
string constant ERROR_CHANGE_SUPPORT_TOO_BIG = "DANDELION_VOTING_CHANGE_SUPP_TOO_BIG";
string constant ERROR_DISALLOWED = "RECOVER_DISALLOWED";
string constant ERROR_DIV_ZERO = "MATH64_DIV_ZERO";
string constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";
string constant ERROR_EXECUTOR_DISABLED = "EVMREG_EXECUTOR_DISABLED";
string constant ERROR_EXECUTOR_ENABLED = "EVMREG_EXECUTOR_ENABLED";
string constant ERROR_EXECUTOR_INVALID_RETURN = "EVMRUN_EXECUTOR_INVALID_RETURN";
string constant ERROR_EXECUTOR_UNAVAILABLE = "EVMRUN_EXECUTOR_UNAVAILABLE";
string constant ERROR_EXISTENT_MANAGER = "ACL_EXISTENT_MANAGER";
string constant ERROR_IMPROPER_LENGTH = "CONVERSION_IMPROPER_LENGTH";
string constant ERROR_INEXISTENT_EXECUTOR = "EVMREG_INEXISTENT_EXECUTOR";
string constant ERROR_INIT_PCTS = "DANDELION_VOTING_INIT_PCTS";
string constant ERROR_INIT_SUPPORT_TOO_BIG = "DANDELION_VOTING_INIT_SUPPORT_TOO_BIG";
string constant ERROR_INVALID_APP_CHANGE = "KERNEL_INVALID_APP_CHANGE";
string constant ERROR_INVALID_LENGTH = "EVMCALLS_INVALID_LENGTH";
string constant ERROR_MUL_OVERFLOW = "MATH64_MUL_OVERFLOW";
string constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";
string constant ERROR_NOT_INITIALIZED = "INIT_NOT_INITIALIZED";
string constant ERROR_NO_VOTE = "DANDELION_VOTING_NO_VOTE";
string constant ERROR_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";
string constant ERROR_ORACLE_SENDER_MISSING = "DANDELION_VOTING_ORACLE_SENDER_MISSING";
string constant ERROR_ORACLE_SENDER_TOO_BIG = "DANDELION_VOTING_ORACLE_SENDER_TOO_BIG";
string constant ERROR_ORACLE_SENDER_ZERO = "DANDELION_VOTING_ORACLE_SENDER_ZERO";
string constant ERROR_PROTECTED_STATE_MODIFIED = "EVMRUN_PROTECTED_STATE_MODIFIED";
string constant ERROR_REENTRANT = "REENTRANCY_REENTRANT_CALL";
string constant ERROR_SCRIPT_LENGTH_TOO_SHORT = "EVMREG_SCRIPT_LENGTH_TOO_SHORT";
string constant ERROR_SUB_UNDERFLOW = "MATH64_SUB_UNDERFLOW";
string constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";
string constant ERROR_TOKEN_ALLOWANCE_REVERTED = "SAFE_ERC_20_ALLOWANCE_REVERTED";
string constant ERROR_TOKEN_BALANCE_REVERTED = "SAFE_ERC_20_BALANCE_REVERTED";
string constant ERROR_TOKEN_TRANSFER_FAILED = "RECOVER_TOKEN_TRANSFER_FAILED";
string constant ERROR_VAULT_NOT_CONTRACT = "RECOVER_VAULT_NOT_CONTRACT";
string constant ERROR_VOTE_ID_ZERO = "DANDELION_VOTING_VOTE_ID_ZERO";
string constant NOT_CLONE = "NOT_CLONE";
string constant NO_CHAL = "NO_CHAL";
string constant MAIN_GOVERNANCE_INFO_TAG = "StarkEx.Main.2019.GovernorsInformation";
string constant PROXY_GOVERNANCE_TAG = "StarkEx.Proxy.2019.GovernorsInformation";
string constant PROXY_VERSION = "3.0.1";
string constant PROXY_VERSION = "3.0.2";
string constant UPGRADE_INTERFACE_VERSION = "5.0.0";
string constant VERSION = "1";
string constant VERSION = "1.0.0";
string constant VERSION = "1.3.0";
string constant _TOKEN_PERMISSIONS_TYPESTRING = "TokenPermissions(address token,uint256 amount)";
string constant getName = "AdminFacet";
string constant getName = "ExecutorFacet";
string constant getName = "GettersFacet";
string constant getName = "MailboxFacet";
string constant getName = "ValidatorTimelock";
string constant version = "1.1.0";
string constant version = "1.11.0";
string constant version = "1.3.0";
string constant version = "1.6.0";
string constant version = "1.7.0";
string constant version = "1.9.0";
string constant version = "2.0.0";
string constant version = "2.2.0";
string constant version = "2.4.0";
uint constant DEPOSIT_CONTRACT_TREE_DEPTH = 32;
uint constant MAX_DEPOSIT_COUNT = 2 ** DEPOSIT_CONTRACT_TREE_DEPTH - 1;
uint constant BP_DENOMINATOR = 10000;
uint constant CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS = 2;
uint constant CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION = 1;
uint constant CONFIG_TYPE_ORACLE = 6;
uint constant CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS = 5;
uint constant CONFIG_TYPE_OUTBOUND_PROOF_TYPE = 4;
uint constant CONFIG_TYPE_RELAYER = 3;
uint constant DAO_PERDENTAGE = 20;
uint constant GRACE_PERIOD = 14 days;
uint constant MAXIMUM_DELAY = 30 days;
uint constant MINIMUM_DELAY = 2 days;
uint constant MIN_CLAIM_DELAY = 90 days;
uint constant MIN_WITHDRAW_DELAY = 90 days;
uint constant REWARD_PERCENTAGE = 70;
uint128 constant MAX_DEPOSIT_AMOUNT = 20282409603651670423947251286015;
uint128 constant L1BLOCK_DEFAULT_CONTEXT = type(uint128).max;
uint128 constant L2BLOCK_DEFAULT_CONTEXT = type(uint128).max;
uint128 constant TIMESTAMP_DEFAULT_CONTEXT = type(uint128).max;
uint128 constant OUTBOX_VERSION = 0;
uint128 constant OUTBOX_VERSION = 1;
uint128 constant OUTBOX_VERSION = 2;
uint16 constant lastMem = 1920;
uint16 constant pEval_l1 = 1888;
uint16 constant pH0w8_0 = 224;
uint16 constant pH0w8_1 = 256;
uint16 constant pH0w8_2 = 288;
uint16 constant pH0w8_3 = 320;
uint16 constant pH0w8_4 = 352;
uint16 constant pH0w8_5 = 384;
uint16 constant pH0w8_6 = 416;
uint16 constant pH0w8_7 = 448;
uint16 constant pH1w4_0 = 480;
uint16 constant pH1w4_1 = 512;
uint16 constant pH1w4_2 = 544;
uint16 constant pH1w4_3 = 576;
uint16 constant pH2w3_0 = 608;
uint16 constant pH2w3_1 = 640;
uint16 constant pH2w3_2 = 672;
uint16 constant pH3w3_0 = 704;
uint16 constant pH3w3_1 = 736;
uint16 constant pH3w3_2 = 768;
uint16 constant ARBITRARY_JUMP = 0x8003;
uint16 constant ARBITRARY_JUMP_IF = 0x8004;
uint16 constant BYTES32_VALS_NUM = 2;
uint16 constant CALL = 0x10;
uint16 constant CALLER_MODULE_INTERNAL_CALL = 0x800A;
uint16 constant CALL_INDIRECT = 0x11;
uint16 constant CROSS_MODULE_CALL = 0x8009;
uint16 constant DROP = 0x1A;
uint16 constant DUP = 0x8008;
uint16 constant F32_CONST = 0x43;
uint16 constant F32_LOAD = 0x2A;
uint16 constant F32_REINTERPRET_I32 = 0xBE;
uint16 constant F32_STORE = 0x38;
uint16 constant F64_CONST = 0x44;
uint16 constant F64_LOAD = 0x2B;
uint16 constant F64_REINTERPRET_I64 = 0xBF;
uint16 constant F64_STORE = 0x39;
uint16 constant GET_GLOBAL_STATE_BYTES32 = 0x8010;
uint16 constant GET_GLOBAL_STATE_U64 = 0x8012;
uint16 constant GLOBAL_GET = 0x23;
uint16 constant GLOBAL_SET = 0x24;
uint16 constant HALT_AND_SET_FINISHED = 0x8022;
uint16 constant I32_ADD = 0x6A;
uint16 constant I32_AND = 0x71;
uint16 constant I32_CONST = 0x41;
uint16 constant I32_DIV_S = 0x6D;
uint16 constant I32_DIV_U = 0x6E;
uint16 constant I32_EQZ = 0x45;
uint16 constant I32_EXTEND_16S = 0xC1;
uint16 constant I32_EXTEND_8S = 0xC0;
uint16 constant I32_LOAD = 0x28;
uint16 constant I32_LOAD16_S = 0x2E;
uint16 constant I32_LOAD16_U = 0x2F;
uint16 constant I32_LOAD8_S = 0x2C;
uint16 constant I32_LOAD8_U = 0x2D;
uint16 constant I32_MUL = 0x6C;
uint16 constant I32_OR = 0x72;
uint16 constant I32_REINTERPRET_F32 = 0xBC;
uint16 constant I32_RELOP_BASE = 0x46;
uint16 constant I32_REM_S = 0x6F;
uint16 constant I32_REM_U = 0x70;
uint16 constant I32_ROTL = 0x77;
uint16 constant I32_ROTR = 0x78;
uint16 constant I32_SHL = 0x74;
uint16 constant I32_SHR_S = 0x75;
uint16 constant I32_SHR_U = 0x76;
uint16 constant I32_STORE = 0x36;
uint16 constant I32_STORE16 = 0x3B;
uint16 constant I32_STORE8 = 0x3A;
uint16 constant I32_SUB = 0x6B;
uint16 constant I32_UNOP_BASE = 0x67;
uint16 constant I32_WRAP_I64 = 0xA7;
uint16 constant I32_XOR = 0x73;
uint16 constant I64_ADD = 0x7C;
uint16 constant I64_AND = 0x83;
uint16 constant I64_CONST = 0x42;
uint16 constant I64_DIV_S = 0x7F;
uint16 constant I64_DIV_U = 0x80;
uint16 constant I64_EQZ = 0x50;
uint16 constant I64_EXTEND_16S = 0xC3;
uint16 constant I64_EXTEND_32S = 0xC4;
uint16 constant I64_EXTEND_8S = 0xC2;
uint16 constant I64_EXTEND_I32_S = 0xAC;
uint16 constant I64_EXTEND_I32_U = 0xAD;
uint16 constant I64_LOAD = 0x29;
uint16 constant I64_LOAD16_S = 0x32;
uint16 constant I64_LOAD16_U = 0x33;
uint16 constant I64_LOAD32_S = 0x34;
uint16 constant I64_LOAD32_U = 0x35;
uint16 constant I64_LOAD8_S = 0x30;
uint16 constant I64_LOAD8_U = 0x31;
uint16 constant I64_MUL = 0x7E;
uint16 constant I64_OR = 0x84;
uint16 constant I64_REINTERPRET_F64 = 0xBD;
uint16 constant I64_RELOP_BASE = 0x51;
uint16 constant I64_REM_S = 0x81;
uint16 constant I64_REM_U = 0x82;
uint16 constant I64_ROTL = 0x89;
uint16 constant I64_ROTR = 0x8A;
uint16 constant I64_SHL = 0x86;
uint16 constant I64_SHR_S = 0x87;
uint16 constant I64_SHR_U = 0x88;
uint16 constant I64_STORE = 0x37;
uint16 constant I64_STORE16 = 0x3D;
uint16 constant I64_STORE32 = 0x3E;
uint16 constant I64_STORE8 = 0x3C;
uint16 constant I64_SUB = 0x7D;
uint16 constant I64_UNOP_BASE = 0x79;
uint16 constant I64_XOR = 0x85;
uint16 constant INIT_FRAME = 0x8002;
uint16 constant IRELOP_EQ = 0;
uint16 constant IRELOP_GE_S = 8;
uint16 constant IRELOP_GE_U = 9;
uint16 constant IRELOP_GT_S = 4;
uint16 constant IRELOP_GT_U = 5;
uint16 constant IRELOP_LAST = IRELOP_GE_U;
uint16 constant IRELOP_LE_S = 6;
uint16 constant IRELOP_LE_U = 7;
uint16 constant IRELOP_LT_S = 2;
uint16 constant IRELOP_LT_U = 3;
uint16 constant IRELOP_NE = 1;
uint16 constant IUNOP_CLZ = 0;
uint16 constant IUNOP_CTZ = 1;
uint16 constant IUNOP_LAST = IUNOP_POPCNT;
uint16 constant IUNOP_POPCNT = 2;
uint16 constant LOCAL_GET = 0x20;
uint16 constant LOCAL_SET = 0x21;
uint16 constant MEMORY_GROW = 0x40;
uint16 constant MEMORY_SIZE = 0x3F;
uint16 constant MOVE_FROM_INTERNAL_TO_STACK = 0x8006;
uint16 constant MOVE_FROM_STACK_TO_INTERNAL = 0x8005;
uint16 constant NOP = 0x01;
uint16 constant READ_INBOX_MESSAGE = 0x8021;
uint16 constant READ_PRE_IMAGE = 0x8020;
uint16 constant RETURN = 0x0F;
uint16 constant SELECT = 0x1B;
uint16 constant SET_GLOBAL_STATE_BYTES32 = 0x8011;
uint16 constant SET_GLOBAL_STATE_U64 = 0x8013;
uint16 constant U64_VALS_NUM = 2;
uint16 constant UNREACHABLE = 0x00;
uint16 constant BLOCK_VERSION = 65535;
uint16 constant DEFAULT_VERSION = 0;
uint16 constant INITIALIZE_TX_CONSTANT_BYTES = 32;
uint16 constant INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA = 31;
uint16 constant MESSAGE_VERSION = 1;
uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);
uint160 constant OFFSET = uint160(0x1111000000000000000000000000000000001111);
uint256 constant ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP = 1;
uint256 constant ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP_OLD = 1;
uint256 constant BRIDGE = 0xa4b5;
uint256 constant C0x = 7005013949998269612234996630658580519456097203281734268590713858661772481668;
uint256 constant C0y = 869093939501355406318588453775243436758538662501260653214950591532352435323;
uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;
uint256 constant DELAYED_INBOX = 0xa4b6;
uint256 constant DEPLOY_L2_BRIDGE_COUNTERPART_GAS_LIMIT = 10000000;
uint256 constant ENTRY_NOT_FOUND = uint256(~0);
uint256 constant FOUR = 4;
uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
uint256 constant G1x = 1;
uint256 constant G1y = 2;
uint256 constant G2x1 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
uint256 constant G2x2 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
uint256 constant G2y1 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
uint256 constant G2y2 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
uint256 constant GLOBAL_CONFIG_KEY = uint256(~0);
uint256 constant IDX_MAP_0 = 0x3000100000203000002010004002012003003200010000001222000021002010;
uint256 constant IDX_MAP_1 = 0x4300000140200010000000001000030000300100000222303302;
uint256 constant IDX_MAP_2 = 0x10001300000020200020000220001002020000320000020031100030020012;
uint256 constant IDX_MAP_3 = 0x120300002000000000000100000000202001002000040101130302000000;
uint256 constant LIMB_WIDTH = 68;
uint256 constant MAGIC_SALT = 24748;
uint256 constant MAX_L1_MSG_FEE = 1 ether;
uint256 constant MESSAGE_TO_L1_FROM_ADDRESS_OFFSET = 0;
uint256 constant MESSAGE_TO_L1_PAYLOAD_SIZE_OFFSET = 2;
uint256 constant MESSAGE_TO_L1_PREFIX_SIZE = 3;
uint256 constant MESSAGE_TO_L1_TO_ADDRESS_OFFSET = 1;
uint256 constant MESSAGE_TO_L2_FROM_ADDRESS_OFFSET = 0;
uint256 constant MESSAGE_TO_L2_NONCE_OFFSET = 2;
uint256 constant MESSAGE_TO_L2_PAYLOAD_SIZE_OFFSET = 4;
uint256 constant MESSAGE_TO_L2_PREFIX_SIZE = 5;
uint256 constant MESSAGE_TO_L2_SELECTOR_OFFSET = 3;
uint256 constant MESSAGE_TO_L2_TO_ADDRESS_OFFSET = 1;
uint256 constant NODE_BEACON = 0xa4b3;
uint256 constant NUM_DIFFERENT_GATES = 2;
uint256 constant NUM_GATE_SELECTORS_OPENED_EXPLICITLY = 1;
uint256 constant NUM_SETUP_POLYS_FOR_MAIN_GATE = 7;
uint256 constant NUM_SETUP_POLYS_RANGE_CHECK_GATE = 0;
uint256 constant ONE = 1;
uint256 constant OUTBOX = 0xa4b4;
uint256 constant PERPETUAL_AMOUNT_UPPER_BOUND = 2 ** 64;
uint256 constant PERPETUAL_ASSET_ID_UPPER_BOUND = 2 ** 120;
uint256 constant PERPETUAL_CONFIGURATION_DELAY = 0;
uint256 constant PERPETUAL_POSITION_ID_UPPER_BOUND = 2 ** 64;
uint256 constant PERPETUAL_SYSTEM_TIME_ADVANCE_BOUND = 4 hours;
uint256 constant PERPETUAL_SYSTEM_TIME_LAG_BOUND = 14 days;
uint256 constant PERPETUAL_TIMESTAMP_BITS = 32;
uint256 constant QUANTUM_UPPER_BOUND = 2 ** 128;
uint256 constant REQUIRED_L2_GAS_PRICE_PER_PUBDATA = 800;
uint256 constant ROLLUP_ADMIN = 0xa4b2;
uint256 constant ROLLUP_USER = 0xa4b1;
uint256 constant SEQ_INBOX = 0xa4b7;
uint256 constant SERIALIZED_PROOF_LENGTH = 34;
uint256 constant SERIALIZED_PROOF_LENGTH_OLD = 33;
uint256 constant STARKEX_EXPIRATION_TIMESTAMP_BITS = 22;
uint256 constant STARKEX_MAX_QUANTUM = 2 ** 128 - 1;
uint256 constant STARKEX_MAX_VAULT_ID = 2 ** 31 - 1;
uint256 constant STATE_WIDTH = 4;
uint256 constant STATE_WIDTH_OLD = 4;
uint256 constant SUBCONTRACT_BITS = 4;
uint256 constant THREE = 3;
uint256 constant TRANSFER_FROM_STARKNET = 0;
uint256 constant TWO = 2;
uint256 constant UINT256_PART_SIZE = 2 ** UINT256_PART_SIZE_BITS;
uint256 constant UINT256_PART_SIZE_BITS = 128;
uint256 constant VK_TREE_ROOT = 0x1ffdc7ebe04681d451ae0658a6ad27feb63835b0edf90bdfa203cd8d12282ace;
uint256 constant VK_TREE_ROOT = 0x27362ec1b4c43df95bd87dc1b1591227b4095aaeb2e030db431c291daf986550;
uint256 constant X2x1 = 21831381940315734285607113342023901060522397560371972897001948545212302161822;
uint256 constant X2x2 = 17231025384763736816414546592865244497437017442647097510447326538965263639101;
uint256 constant X2y1 = 2388026358213174446665280700919698872609886601280537296205114254867301080648;
uint256 constant X2y2 = 11507326595632554467052522095592665270651932854513688777769618397986436103170;
uint256 constant ZERO = 0;
uint256 constant bn254_b_coeff = 3;
uint256 constant BATCH_INVERSE_CHUNK = (2 + N_ROWS_IN_MASK);
uint256 constant BATCH_INVERSE_SIZE = MAX_N_QUERIES * BATCH_INVERSE_CHUNK;
uint256 constant CHANNEL_STATE_SIZE = 3;
uint256 constant CONSTRAINTS_DEGREE_BOUND = 2;
uint256 constant ECDSA_BUILTIN_RATIO = 2048;
uint256 constant ECDSA_BUILTIN_RATIO = 512;
uint256 constant ECDSA_BUILTIN_REPETITIONS = 1;
uint256 constant FRI_CTX_TO_COSET_EVALUATIONS_OFFSET = 0;
uint256 constant FRI_CTX_TO_FRI_GROUP_OFFSET = FRI_GROUP_SIZE;
uint256 constant FRI_GROUP_SIZE = 0x20 * MAX_COSET_SIZE;
uint256 constant FRI_MAX_FRI_STEP = 4;
uint256 constant FRI_QUEUE_SIZE = MAX_N_QUERIES;
uint256 constant GENERATOR_VAL = 3;
uint256 constant LAYOUT_CODE = 2073345364981693374828;
uint256 constant LAYOUT_CODE = 495756340332;
uint256 constant LAYOUT_CODE = 6579576;
uint256 constant LAYOUT_LENGTH = 2 ** 64;
uint256 constant LOG_CPU_COMPONENT_HEIGHT = 4;
uint256 constant MASK_SIZE = 133;
uint256 constant MASK_SIZE = 205;
uint256 constant MASK_SIZE = 206;
uint256 constant MAX_COSET_SIZE = 2 ** FRI_MAX_FRI_STEP;
uint256 constant MAX_FRI_STEP = 3;
uint256 constant MAX_N_MERKLE_VERIFIER_QUERIES = 128;
uint256 constant MAX_N_QUERIES = 48;
uint256 constant MAX_SUPPORTED_MAX_FRI_STEP = 4;
uint256 constant MM_BLOW_UP_FACTOR = 0x1;
uint256 constant MM_CONSTRAINT_POLY_ARGS_END = 0x2c2;
uint256 constant MM_CONSTRAINT_POLY_ARGS_END = 0x388;
uint256 constant MM_CONSTRAINT_POLY_ARGS_END = 0x389;
uint256 constant MM_CONSTRAINT_POLY_ARGS_START = 0x13d;
uint256 constant MM_CONTEXT_SIZE = 0x5be;
uint256 constant MM_CONTEXT_SIZE = 0x90c;
uint256 constant MM_CONTEXT_SIZE = 0x99e;
uint256 constant MM_ECDSA__SIG_CONFIG_ALPHA = 0x153;
uint256 constant MM_ECDSA__SIG_CONFIG_BETA = 0x156;
uint256 constant MM_ECDSA__SIG_CONFIG_SHIFT_POINT_X = 0x154;
uint256 constant MM_ECDSA__SIG_CONFIG_SHIFT_POINT_Y = 0x155;
uint256 constant MM_EVAL_DOMAIN_GENERATOR = 0x4;
uint256 constant MM_EVAL_DOMAIN_SIZE = 0x0;
uint256 constant MM_FINAL_AP = 0x146;
uint256 constant MM_FINAL_CHECKPOINTS_ADDR = 0x159;
uint256 constant MM_FINAL_PC = 0x147;
uint256 constant MM_FRI_LAST_LAYER_DEG_BOUND = 0x13b;
uint256 constant MM_FRI_LAST_LAYER_PTR = 0x13c;
uint256 constant MM_FRI_QUERIES_DELIMITER = 0xfd;
uint256 constant MM_FRI_STEPS_PTR = 0x126;
uint256 constant MM_HALF_OFFSET_SIZE = 0x143;
uint256 constant MM_INITIAL_AP = 0x144;
uint256 constant MM_INITIAL_CHECKPOINTS_ADDR = 0x158;
uint256 constant MM_INITIAL_ECDSA_ADDR = 0x157;
uint256 constant MM_INITIAL_PC = 0x145;
uint256 constant MM_INITIAL_PEDERSEN_ADDR = 0x151;
uint256 constant MM_INITIAL_RC_ADDR = 0x152;
uint256 constant MM_LOG_EVAL_DOMAIN_SIZE = 0x2;
uint256 constant MM_LOG_N_STEPS = 0x5bb;
uint256 constant MM_LOG_N_STEPS = 0x909;
uint256 constant MM_LOG_N_STEPS = 0x99b;
uint256 constant MM_MEMORY__MULTI_COLUMN_PERM__HASH_INTERACTION_ELM0 = 0x149;
uint256 constant MM_MEMORY__MULTI_COLUMN_PERM__PERM__INTERACTION_ELM = 0x148;
uint256 constant MM_MEMORY__MULTI_COLUMN_PERM__PERM__PUBLIC_MEMORY_PROD = 0x14a;
uint256 constant MM_N_PUBLIC_MEM_ENTRIES = 0x5bc;
uint256 constant MM_N_PUBLIC_MEM_ENTRIES = 0x90a;
uint256 constant MM_N_PUBLIC_MEM_ENTRIES = 0x99c;
uint256 constant MM_N_PUBLIC_MEM_PAGES = 0x5bd;
uint256 constant MM_N_PUBLIC_MEM_PAGES = 0x90b;
uint256 constant MM_N_PUBLIC_MEM_PAGES = 0x99d;
uint256 constant MM_N_UNIQUE_QUERIES = 0x9;
uint256 constant MM_OFFSET_SIZE = 0x142;
uint256 constant MM_OODS_COMMITMENT = 0x8;
uint256 constant MM_OODS_POINT = 0x15b;
uint256 constant MM_PEDERSEN__SHIFT_POINT_X = 0x14f;
uint256 constant MM_PEDERSEN__SHIFT_POINT_Y = 0x150;
uint256 constant MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__X = 0x13f;
uint256 constant MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__Y = 0x140;
uint256 constant MM_PERIODIC_COLUMN__PEDERSEN__POINTS__X = 0x13d;
uint256 constant MM_PERIODIC_COLUMN__PEDERSEN__POINTS__Y = 0x13e;
uint256 constant MM_PROOF_OF_WORK_BITS = 0x3;
uint256 constant MM_PUBLIC_INPUT_PTR = 0x5;
uint256 constant MM_RC16__PERM__INTERACTION_ELM = 0x14b;
uint256 constant MM_RC16__PERM__PUBLIC_MEMORY_PROD = 0x14c;
uint256 constant MM_RC_MAX = 0x14e;
uint256 constant MM_RC_MIN = 0x14d;
uint256 constant MM_TRACE_GENERATOR = 0x15a;
uint256 constant MM_TRACE_LENGTH = 0x141;
uint256 constant N_COEFFICIENTS = 222;
uint256 constant N_COEFFICIENTS = 348;
uint256 constant N_COLUMNS_IN_MASK = 10;
uint256 constant N_COLUMNS_IN_MASK = 22;
uint256 constant N_COLUMNS_IN_MASK = 25;
uint256 constant N_COLUMNS_IN_TRACE0 = 21;
uint256 constant N_COLUMNS_IN_TRACE0 = 23;
uint256 constant N_COLUMNS_IN_TRACE0 = 9;
uint256 constant N_COLUMNS_IN_TRACE1 = 1;
uint256 constant N_COLUMNS_IN_TRACE1 = 2;
uint256 constant N_INTERACTION_ELEMENTS = 3;
uint256 constant N_OODS_COEFFICIENTS = N_OODS_VALUES;
uint256 constant N_OODS_VALUES = MASK_SIZE + CONSTRAINTS_DEGREE_BOUND;
uint256 constant N_ROWS_IN_MASK = 83;
uint256 constant N_ROWS_IN_MASK = 86;
uint256 constant N_ROWS_IN_MASK = 87;
uint256 constant N_TABLES = 63;
uint256 constant ONE_VAL = 1;
uint256 constant PEDERSEN_BUILTIN_RATIO = 32;
uint256 constant PEDERSEN_BUILTIN_RATIO = 8;
uint256 constant PEDERSEN_BUILTIN_REPETITIONS = 1;
uint256 constant PEDERSEN_BUILTIN_REPETITIONS = 4;
uint256 constant PROOF_PARAMS_FRI_LAST_LAYER_DEG_BOUND_OFFSET = 3;
uint256 constant PROOF_PARAMS_FRI_STEPS_OFFSET = 5;
uint256 constant PROOF_PARAMS_LOG_BLOWUP_FACTOR_OFFSET = 1;
uint256 constant PROOF_PARAMS_N_FRI_STEPS_OFFSET = 4;
uint256 constant PROOF_PARAMS_N_QUERIES_OFFSET = 0;
uint256 constant PROOF_PARAMS_PROOF_OF_WORK_BITS_OFFSET = 2;
uint256 constant PUBLIC_MEMORY_STEP = 8;
uint256 constant RC_BUILTIN_RATIO = 16;
uint256 constant RC_BUILTIN_RATIO = 8;
uint256 constant RC_N_PARTS = 8;
uint256 constant CHANNEL_STATE_SIZE = 3;
uint256 constant q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
uint256 constant q_mod = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
uint256 constant qf = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
uint256 constant r_mod = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
uint256 constant w1 = 5709868443893258075976348696661355716898495876243883251619397131511003808859;
uint256 constant w3 = 21888242871839275217838484774961031246154997185409878258781734729429964517155;
uint256 constant w3_2 = 4407920970296243842393367215006156084916469457145843978461;
uint256 constant w4 = 21888242871839275217838484774961031246007050428528088939761107053157389710902;
uint256 constant w4_2 = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
uint256 constant w4_3 = 4407920970296243842541313971887945403937097133418418784715;
uint256 constant w8_1 = 19540430494807482326159819597004422086093766032135589407132600596362845576832;
uint256 constant w8_2 = 21888242871839275217838484774961031246007050428528088939761107053157389710902;
uint256 constant w8_3 = 13274704216607947843011480449124596415239537050559949017414504948711435969894;
uint256 constant w8_4 = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
uint256 constant w8_5 = 2347812377031792896086586148252853002454598368280444936565603590212962918785;
uint256 constant w8_6 = 4407920970296243842541313971887945403937097133418418784715;
uint256 constant w8_7 = 8613538655231327379234925296132678673308827349856085326283699237864372525723;
uint256 constant wr = 18200100796661656210024324131237448517259556535315737226009542456080026430510;
uint256 constant AGGREGATED_AT_Z_OMEGA_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x40;
uint256 constant AGGREGATED_AT_Z_OMEGA_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x60;
uint256 constant AGGREGATED_AT_Z_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x00;
uint256 constant AGGREGATED_AT_Z_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x20;
uint256 constant AGGREGATED_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0xa0;
uint256 constant AGGREGATED_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x80;
uint256 constant AGGREGATED_AT_Z_OMEGA_X_SLOT = (0x200 ^ (0x520 & 0x620)) | 0x80 | (0x2c0 ^ (0x100 & 0x40));
uint256 constant AGGREGATED_AT_Z_OMEGA_X_SLOT = (0x200 ^ 0x520) | 0x620 | 0x80 | (0x2c0 ^ (0x100 & 0x40));
uint256 constant AGGREGATED_AT_Z_OMEGA_Y_SLOT = (0x200 ^ (0x520 & 0x620 & 0x80)) | 0x2c0 | (0x100 & 0x60);
uint256 constant AGGREGATED_AT_Z_X_SLOT = 0x200 | (0x520 & 0x620) | 0x80 | (0x2c0 ^ (0x100 & 0x00));
uint256 constant AGGREGATED_AT_Z_Y_SLOT = (0x200 ^ 0x520 ^ 0x620) | ((0x80 & 0x2c0) ^ (0x100 & 0x20));
uint256 constant APP_DATA_BATCH_ID_OFFSET = 0;
uint256 constant APP_DATA_CONDITIONAL_TRANSFER_DATA_OFFSET = 3;
uint256 constant APP_DATA_N_CONDITIONAL_TRANSFER = 2;
uint256 constant APP_DATA_N_WORDS_PER_CONDITIONAL_TRANSFER = 2;
uint256 constant APP_DATA_PREVIOUS_BATCH_ID_OFFSET = 1;
uint256 constant ASSET_CONFIG_OFFSET_ASSET_ID = 0;
uint256 constant ASSET_CONFIG_OFFSET_CONFIG_HASH = 1;
uint256 constant AUTH_FACT_RESET_TIMELOCK = 1 days;
uint256 constant BALANCE_BIAS = 2 ** 63;
uint256 constant BALANCE_BITS = 64;
uint256 constant BATCH_CONTEXT_LENGTH_POS = 12;
uint256 constant BATCH_CONTEXT_SIZE = 16;
uint256 constant BATCH_CONTEXT_START_POS = 15;
uint256 constant BLOCK_CONTEXT_LENGTH = 60;
uint256 constant BLOCK_HASH_OFFSET = 3;
uint256 constant BLOCK_NUMBER_OFFSET = 2;
uint256 constant BLOCK_PERIOD = 15 seconds;
uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;
uint256 constant BYTES_TILL_TX_DATA = 65;
uint256 constant CHANGE_PUBKEY_BYTES = 6 * CHUNK_BYTES;
uint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 15 minutes;
uint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 24 hours;
uint256 constant CONFIG_HASH_OFFSET = 4;
uint256 constant CONTINUOUS_PAGE = 1;
uint256 constant DEPOSIT_BYTES = 6 * CHUNK_BYTES;
uint256 constant DEPOSIT_VERSION = 0;
uint256 constant EXECUTED_PROPOSAL_TIMESTAMP = uint256(1);
uint256 constant EXPECT_VERIFICATION_IN = 0 hours / BLOCK_PERIOD;
uint256 constant FINAL_PC = INITIAL_PC + 2;
uint256 constant FIRST_CONTINUOUS_PAGE_INDEX = 1;
uint256 constant FORCED_EXIT_BYTES = 6 * CHUNK_BYTES;
uint256 constant FORWARDING = 1;
uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
uint256 constant FULL_EXIT_BYTES = 11 * CHUNK_BYTES;
uint256 constant FUNDING_BITS = 64;
uint256 constant FUNDING_ENTRY_SIZE = 2;
uint256 constant FWD_GAS_LIMIT = 10000;
uint256 constant FXP_BITS = 32;
uint256 constant G2_ELEMENTS_0_X1 = 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2;
uint256 constant G2_ELEMENTS_0_X2 = 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed;
uint256 constant G2_ELEMENTS_0_Y1 = 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b;
uint256 constant G2_ELEMENTS_0_Y2 = 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa;
uint256 constant G2_ELEMENTS_1_X1 = 0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1;
uint256 constant G2_ELEMENTS_1_X2 = 0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0;
uint256 constant G2_ELEMENTS_1_Y1 = 0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4;
uint256 constant G2_ELEMENTS_1_Y2 = 0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55;
uint256 constant HEADER_SIZE = 5;
uint256 constant INBOX_INDEX_DELAYED = 1;
uint256 constant INBOX_INDEX_SEQUENCER = 0;
uint256 constant INITIAL_PC = 1;
uint256 constant INPUT_MASK = 14474011154664524427946373126085988481658748083205070504932198000989141204991;
uint256 constant IS_LOCKED = uint256(2);
uint256 constant IS_NOT_LOCKED = uint256(1);
uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;
uint256 constant MASS_FULL_EXIT_PERIOD = 5 days;
uint256 constant MAX_LEAVES = 2 ** TREE_DEPTH - 1;
uint256 constant MAX_LIST_LENGTH = 32;
uint256 constant MAX_STEPS = 1 << 43;
uint256 constant MAX_STEPS = 1 >> 43;
uint256 constant MERKLE_UPDATE_OFFSET = 0;
uint256 constant METADATA_OFFSET_TASK_N_TREE_PAIRS = 2;
uint256 constant METADATA_OFFSET_TASK_OUTPUT_SIZE = 0;
uint256 constant METADATA_OFFSET_TASK_PROGRAM_HASH = 1;
uint256 constant METADATA_OFFSET_TREE_PAIR_N_NODES = 1;
uint256 constant METADATA_OFFSET_TREE_PAIR_N_PAGES = 0;
uint256 constant METADATA_TASKS_OFFSET = 1;
uint256 constant METADATA_TASKS_OFFSET = array[2 + 4];
uint256 constant METADATA_TASKS_OFFSET = array[arrayIndex ** 2 + fnCall(1, 2, 3)];
uint256 constant METADATA_TASK_HEADER_SIZE = 3;
uint256 constant MINTABLE_ASSET_ID_FLAG = 1 << 250;
uint256 constant MINT_NFT_BYTES = 5 * CHUNK_BYTES;
uint256 constant MODIFICATIONS_OFFSET_BIASED_DIFF = 2;
uint256 constant MODIFICATIONS_OFFSET_POS_ID = 1;
uint256 constant MODIFICATIONS_OFFSET_STARKKEY = 0;
uint256 constant NODE_STACK_ITEM_SIZE = 2;
uint256 constant NODE_STACK_OFFSET_END = 1;
uint256 constant NODE_STACK_OFFSET_HASH = 0;
uint256 constant NON_RESIDUES_0 = 0x05;
uint256 constant NON_RESIDUES_1 = 0x07;
uint256 constant NON_RESIDUES_2 = 0x0a;
uint256 constant NOOP_BYTES = 1 * CHUNK_BYTES;
uint256 constant N_ASSETS_BITS = 16;
uint256 constant N_BUILTINS = 4;
uint256 constant N_MAIN_ARGS = 5;
uint256 constant N_MAIN_RETURN_VALUES = 5;
uint256 constant N_WORDS_PER_PUBLIC_MEMORY_ENTRY = 2;
uint256 constant OFFSET_CHECKPOINTS_BEGIN_PTR = 16;
uint256 constant OFFSET_CHECKPOINTS_STOP_PTR = 17;
uint256 constant OFFSET_ECDSA_BEGIN_ADDR = 14;
uint256 constant OFFSET_ECDSA_STOP_PTR = 15;
uint256 constant OFFSET_EXECUTION_BEGIN_ADDR = 6;
uint256 constant OFFSET_EXECUTION_STOP_PTR = 7;
uint256 constant OFFSET_LAYOUT_CODE = 3;
uint256 constant OFFSET_LOG_N_STEPS = 0;
uint256 constant OFFSET_N_PUBLIC_MEMORY_PAGES = 20;
uint256 constant OFFSET_OUTPUT_BEGIN_ADDR = 8;
uint256 constant OFFSET_OUTPUT_STOP_PTR = 9;
uint256 constant OFFSET_PEDERSEN_BEGIN_ADDR = 10;
uint256 constant OFFSET_PEDERSEN_STOP_PTR = 11;
uint256 constant OFFSET_PROGRAM_BEGIN_ADDR = 4;
uint256 constant OFFSET_PROGRAM_STOP_PTR = 5;
uint256 constant OFFSET_PUBLIC_MEMORY = 21;
uint256 constant OFFSET_PUBLIC_MEMORY_PADDING_ADDR = 18;
uint256 constant OFFSET_PUBLIC_MEMORY_PADDING_VALUE = 19;
uint256 constant OFFSET_RANGE_CHECK_BEGIN_ADDR = 12;
uint256 constant OFFSET_RANGE_CHECK_STOP_PTR = 13;
uint256 constant OFFSET_RC_MAX = 2;
uint256 constant OFFSET_RC_MIN = 1;
uint256 constant OLD_KEY_RETENTION = 16;
uint256 constant OMEGA = 0x1951441010b2b95a6e47a6075066a50a036f5ba978c050f2821df86636c0facb;
uint256 constant ONCHAIN_DATA_FACT_ADDITIONAL_WORDS = 2;
uint256 constant PAIRING_BUFFER_POINT_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0xc0 + 0x00;
uint256 constant PAIRING_BUFFER_POINT_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0xc0 + 0x20;
uint256 constant PAIRING_PAIR_WITH_X_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x100 + 0x80;
uint256 constant PAIRING_PAIR_WITH_X_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x100 + 0x100 + 0xa0;
uint256 constant PARTIAL_EXIT_BYTES = 6 * CHUNK_BYTES;
uint256 constant PETRIFIED_BLOCK = uint256(-1);
uint256 constant PRICE_ENTRY_SIZE = 2;
uint256 constant PRIORITY_EXPIRATION_PERIOD = 14 days;
uint256 constant PROGRAM_SIZE = 224;
uint256 constant PROG_OUT_ASSET_CONFIG_HASHES = 2;
uint256 constant PROG_OUT_GENERAL_CONFIG_HASH = 0;
uint256 constant PROG_OUT_N_ASSET_CONFIGS = 1;
uint256 constant PROG_OUT_N_WORDS_MIN_SIZE = 8;
uint256 constant PROG_OUT_N_WORDS_PER_ASSET_CONFIG = 2;
uint256 constant PROG_OUT_N_WORDS_PER_MODIFICATION = 3;
uint256 constant PROOF_COPY_PERMUTATION_GRAND_PRODUCT_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x400;
uint256 constant PROOF_COPY_PERMUTATION_GRAND_PRODUCT_X_SLOT = 0x200 + 0x520 + 0x120;
uint256 constant PROOF_COPY_PERMUTATION_GRAND_PRODUCT_Y_SLOT = 0x200 + 0x520 + 0x140;
uint256 constant PROOF_COPY_PERMUTATION_POLYS_0_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x3a0;
uint256 constant PROOF_COPY_PERMUTATION_POLYS_1_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x3c0;
uint256 constant PROOF_COPY_PERMUTATION_POLYS_2_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x3e0;
uint256 constant PROOF_GATE_SELECTORS_0_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x380;
uint256 constant PROOF_LINEARISATION_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x500;
uint256 constant PROOF_LOOKUP_GRAND_PRODUCT_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x440;
uint256 constant PROOF_LOOKUP_GRAND_PRODUCT_X_SLOT = 0x200 + 0x520 + 0x1a0;
uint256 constant PROOF_LOOKUP_GRAND_PRODUCT_Y_SLOT = 0x200 + 0x520 + 0x1c0;
uint256 constant PROOF_LOOKUP_SELECTOR_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x4a0;
uint256 constant PROOF_LOOKUP_S_POLY_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x420;
uint256 constant PROOF_LOOKUP_S_POLY_X_SLOT = 0x200 + 0x520 + 0x160;
uint256 constant PROOF_LOOKUP_S_POLY_Y_SLOT = 0x200 + 0x520 + 0x180;
uint256 constant PROOF_LOOKUP_TABLE_TYPE_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x4c0;
uint256 constant PROOF_LOOKUP_T_POLY_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x480;
uint256 constant PROOF_LOOKUP_T_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x460;
uint256 constant PROOF_OPENING_PROOF_AT_Z_OMEGA_X_SLOT = 0x200 + 0x520 + 0x560;
uint256 constant PROOF_OPENING_PROOF_AT_Z_OMEGA_Y_SLOT = 0x200 + 0x520 + 0x580;
uint256 constant PROOF_OPENING_PROOF_AT_Z_X_SLOT = 0x200 + 0x520 + 0x520;
uint256 constant PROOF_OPENING_PROOF_AT_Z_Y_SLOT = 0x200 + 0x520 + 0x540;
uint256 constant PROOF_PUBLIC_INPUT = 0x200 + 0x520 + 0x000;
uint256 constant PROOF_QUOTIENT_POLY_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x4e0;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_0_X_SLOT = 0x200 + 0x520 + 0x1e0;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_0_Y_SLOT = 0x200 + 0x520 + 0x200;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_1_X_SLOT = 0x200 + 0x520 + 0x220;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_1_Y_SLOT = 0x200 + 0x520 + 0x240;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_2_X_SLOT = 0x200 + 0x520 + 0x260;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_2_Y_SLOT = 0x200 + 0x520 + 0x280;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_3_X_SLOT = 0x200 + 0x520 + 0x2a0;
uint256 constant PROOF_QUOTIENT_POLY_PARTS_3_Y_SLOT = 0x200 + 0x520 + 0x2c0;
uint256 constant PROOF_RECURSIVE_PART_P1_X_SLOT = 0x200 + 0x520 + 0x5a0;
uint256 constant PROOF_RECURSIVE_PART_P1_Y_SLOT = 0x200 + 0x520 + 0x5c0;
uint256 constant PROOF_RECURSIVE_PART_P2_X_SLOT = 0x200 + 0x520 + 0x5e0;
uint256 constant PROOF_RECURSIVE_PART_P2_Y_SLOT = 0x200 + 0x520 + 0x600;
uint256 constant PROOF_STATE_POLYS_0_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x2e0;
uint256 constant PROOF_STATE_POLYS_0_X_SLOT = 0x200 + 0x520 + 0x020;
uint256 constant PROOF_STATE_POLYS_0_Y_SLOT = 0x200 + 0x520 + 0x040;
uint256 constant PROOF_STATE_POLYS_1_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x300;
uint256 constant PROOF_STATE_POLYS_1_X_SLOT = 0x200 + 0x520 + 0x060;
uint256 constant PROOF_STATE_POLYS_1_Y_SLOT = 0x200 + 0x520 + 0x080;
uint256 constant PROOF_STATE_POLYS_2_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x320;
uint256 constant PROOF_STATE_POLYS_2_X_SLOT = 0x200 + 0x520 + 0x0a0;
uint256 constant PROOF_STATE_POLYS_2_Y_SLOT = 0x200 + 0x520 + 0x0c0;
uint256 constant PROOF_STATE_POLYS_3_OPENING_AT_Z_OMEGA_SLOT = 0x200 + 0x520 + 0x360;
uint256 constant PROOF_STATE_POLYS_3_OPENING_AT_Z_SLOT = 0x200 + 0x520 + 0x340;
uint256 constant PROOF_STATE_POLYS_3_X_SLOT = 0x200 + 0x520 + 0x0e0;
uint256 constant PROOF_STATE_POLYS_3_Y_SLOT = 0x200 + 0x520 + 0x100;
uint256 constant QUERIES_AT_Z_0_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x40;
uint256 constant QUERIES_AT_Z_0_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x60;
uint256 constant QUERIES_AT_Z_1_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x80;
uint256 constant QUERIES_AT_Z_1_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0xa0;
uint256 constant QUERIES_BUFFER_POINT_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0x00;
uint256 constant QUERIES_T_POLY_AGGREGATED_X_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0xc0;
uint256 constant QUERIES_T_POLY_AGGREGATED_Y_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x2c0 + 0xe0;
uint256 constant Q_MOD = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
uint256 constant REGULAR_PAGE = 0;
uint256 constant R_MOD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
uint256 constant SCRIPT_START_LOCATION = 4;
uint256 constant SECURITY_COUNCIL_MEMBERS_NUMBER = 15;
uint256 constant SECURITY_COUNCIL_MEMBERS_NUMBER = 3;
uint256 constant SECURITY_COUNCIL_THRESHOLD = 9;
uint256 constant SELECTOR_OFFSET = 0x20;
uint256 constant SELECTOR_SIZE = 4;
uint256 constant STARKEX_MINTABLE_ASSET_ID_FLAG = 1 << 250;
uint256 constant STATE_ALPHA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x000;
uint256 constant STATE_BETA_GAMMA_PLUS_GAMMA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x1c0;
uint256 constant STATE_BETA_LOOKUP_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x160;
uint256 constant STATE_BETA_PLUS_ONE_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x1a0;
uint256 constant STATE_BETA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x020;
uint256 constant STATE_ETA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x140;
uint256 constant STATE_GAMMA_LOOKUP_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x180;
uint256 constant STATE_GAMMA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x040;
uint256 constant STATE_L_0_AT_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x260;
uint256 constant STATE_L_N_MINUS_ONE_AT_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x280;
uint256 constant STATE_OFFSET_FUNDING = 5;
uint256 constant STATE_OFFSET_N_FUNDING = 4;
uint256 constant STATE_OFFSET_ORDERS_HEIGHT = 3;
uint256 constant STATE_OFFSET_ORDERS_ROOT = 2;
uint256 constant STATE_OFFSET_VAULTS_HEIGHT = 1;
uint256 constant STATE_OFFSET_VAULTS_ROOT = 0;
uint256 constant STATE_POWER_OF_ALPHA_2_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x060;
uint256 constant STATE_POWER_OF_ALPHA_3_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x080;
uint256 constant STATE_POWER_OF_ALPHA_4_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x0a0;
uint256 constant STATE_POWER_OF_ALPHA_5_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x0c0;
uint256 constant STATE_POWER_OF_ALPHA_6_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x0e0;
uint256 constant STATE_POWER_OF_ALPHA_7_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x100;
uint256 constant STATE_POWER_OF_ALPHA_8_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x120;
uint256 constant STATE_U_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x200;
uint256 constant STATE_V_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x1e0;
uint256 constant STATE_Z_IN_DOMAIN_SIZE = 0x200 + 0x520 + 0x620 + 0x80 + 0x2a0;
uint256 constant STATE_Z_MINUS_LAST_OMEGA_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x240;
uint256 constant STATE_Z_SLOT = 0x200 + 0x520 + 0x620 + 0x80 + 0x220;
uint256 constant TIME_TO_WITHDRAW_FUNDS_FROM_FULL_EXIT = 2 days;
uint256 constant TOKEN_CONTRACT_ADDRESS_OFFSET = SELECTOR_OFFSET + SELECTOR_SIZE;
uint256 constant TRANSCRIPT_BEGIN_SLOT = 0x200 + 0x520 + 0x620 + 0x00;
uint256 constant TRANSCRIPT_CHALLENGE_SLOT = 0x200 + 0x520 + 0x620 + 0x44;
uint256 constant TRANSCRIPT_DST_BYTE_SLOT = 0x200 + 0x520 + 0x620 + 0x03;
uint256 constant TRANSCRIPT_STATE_0_SLOT = 0x200 + 0x520 + 0x620 + 0x04;
uint256 constant TRANSCRIPT_STATE_1_SLOT = 0x200 + 0x520 + 0x620 + 0x24;
uint256 constant TRANSFER_BYTES = 2 * CHUNK_BYTES;
uint256 constant TRANSFER_TO_NEW_BYTES = 6 * CHUNK_BYTES;
uint256 constant TREE_DEPTH = 32;
uint256 constant TREE_RADIX = 16;
uint256 constant TX_DATA_HEADER_SIZE = 3;
uint256 constant UPGRADEABLE = 2;
uint256 constant VK_GATE_SELECTORS_0_X_SLOT = 0x200 + 0x200;
uint256 constant VK_GATE_SELECTORS_0_Y_SLOT = 0x200 + 0x220;
uint256 constant VK_GATE_SELECTORS_1_X_SLOT = 0x200 + 0x240;
uint256 constant VK_GATE_SELECTORS_1_Y_SLOT = 0x200 + 0x260;
uint256 constant VK_GATE_SETUP_0_X_SLOT = 0x200 + 0x000;
uint256 constant VK_GATE_SETUP_0_Y_SLOT = 0x200 + 0x020;
uint256 constant VK_GATE_SETUP_1_X_SLOT = 0x200 + 0x040;
uint256 constant VK_GATE_SETUP_1_Y_SLOT = 0x200 + 0x060;
uint256 constant VK_GATE_SETUP_2_X_SLOT = 0x200 + 0x080;
uint256 constant VK_GATE_SETUP_2_Y_SLOT = 0x200 + 0x0a0;
uint256 constant VK_GATE_SETUP_3_X_SLOT = 0x200 + 0x0c0;
uint256 constant VK_GATE_SETUP_3_Y_SLOT = 0x200 + 0x0e0;
uint256 constant VK_GATE_SETUP_4_X_SLOT = 0x200 + 0x100;
uint256 constant VK_GATE_SETUP_4_Y_SLOT = 0x200 + 0x120;
uint256 constant VK_GATE_SETUP_5_X_SLOT = 0x200 + 0x140;
uint256 constant VK_GATE_SETUP_5_Y_SLOT = 0x200 + 0x160;
uint256 constant VK_GATE_SETUP_6_X_SLOT = 0x200 + 0x180;
uint256 constant VK_GATE_SETUP_6_Y_SLOT = 0x200 + 0x1a0;
uint256 constant VK_GATE_SETUP_7_X_SLOT = 0x200 + 0x1c0;
uint256 constant VK_GATE_SETUP_7_Y_SLOT = 0x200 + 0x1e0;
uint256 constant VK_LOOKUP_SELECTOR_X_SLOT = 0x200 + 0x380;
uint256 constant VK_LOOKUP_SELECTOR_Y_SLOT = 0x200 + 0x3a0;
uint256 constant VK_LOOKUP_TABLE_0_X_SLOT = 0x200 + 0x3c0;
uint256 constant VK_LOOKUP_TABLE_0_Y_SLOT = 0x200 + 0x3e0;
uint256 constant VK_LOOKUP_TABLE_1_X_SLOT = 0x200 + 0x400;
uint256 constant VK_LOOKUP_TABLE_1_Y_SLOT = 0x200 + 0x420;
uint256 constant VK_LOOKUP_TABLE_2_X_SLOT = 0x200 + 0x440;
uint256 constant VK_LOOKUP_TABLE_2_Y_SLOT = 0x200 + 0x460;
uint256 constant VK_LOOKUP_TABLE_3_X_SLOT = 0x200 + 0x480;
uint256 constant VK_LOOKUP_TABLE_3_Y_SLOT = 0x200 + 0x4a0;
uint256 constant VK_LOOKUP_TABLE_TYPE_X_SLOT = 0x200 + 0x4c0;
uint256 constant VK_LOOKUP_TABLE_TYPE_Y_SLOT = 0x200 + 0x4e0;
uint256 constant VK_PERMUTATION_0_X_SLOT = 0x200 + 0x280;
uint256 constant VK_PERMUTATION_0_Y_SLOT = 0x200 + 0x2a0;
uint256 constant VK_PERMUTATION_1_X_SLOT = 0x200 + 0x2c0;
uint256 constant VK_PERMUTATION_1_Y_SLOT = 0x200 + 0x2e0;
uint256 constant VK_PERMUTATION_2_X_SLOT = 0x200 + 0x300;
uint256 constant VK_PERMUTATION_2_Y_SLOT = 0x200 + 0x320;
uint256 constant VK_PERMUTATION_3_X_SLOT = 0x200 + 0x340;
uint256 constant VK_PERMUTATION_3_Y_SLOT = 0x200 + 0x360;
uint256 constant VK_RECURSIVE_FLAG_SLOT = 0x200 + 0x500;
uint256 constant WITHDRAWAL_GAS_LIMIT = 100000;
uint256 constant WITHDRAWAL_NFT_GAS_LIMIT = 300000;
uint256 constant WITHDRAW_NFT_BYTES = 10 * CHUNK_BYTES;
uint256 constant _DEPOSIT_CONTRACT_TREE_DEPTH = 32;
uint256 constant _DONE_TIMESTAMP = uint256(1);
uint256 constant _EXIT_TREE_DEPTH = 32;
uint256 constant _MAX_BATCH_FEE = 1000 ether;
uint256 constant _MAX_BATCH_MULTIPLIER = 12;
uint256 constant _MAX_FORCE_BATCH_BYTE_LENGTH = 5000;
uint256 constant _MAX_TRANSACTIONS_BYTE_LENGTH = 120000;
uint256 constant _MIN_BATCH_FEE = 1 gwei;
uint256 constant AMOUNT_DEFAULT_CONTEXT = type(uint256).max;
uint256 constant BLOCK_TIMESTAMP_EXPIRATION = 0;
uint256 constant BODY_OFFSET = 77;
uint256 constant DESTINATION_OFFSET = 41;
uint256 constant FP_SCALING_FACTOR = 10 ** 18;
uint256 constant INBOX_NUM = 2;
uint256 constant LEAF_SIZE = 32;
uint256 constant LOCK_FLAG_ADDRESS = 0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4;
uint256 constant LOCK_FLAG_ADDRESS = 0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4; // keccak256("ReentrancyGuard") - 1;
uint256 constant MAX_CHALLENGE_DEGREE = 40;
uint256 constant MAX_LEN = 10;
uint256 constant MAX_UINT256 = 2 ** 256 - 1;
uint256 constant MAX_UINT64 = uint64(-1);
uint256 constant MERKLE_INDEX_OFFSET = 32;
uint256 constant MERKLE_PROOF_OFFSET = 68;
uint256 constant MERKLE_ROOT_OFFSET = 0;
uint256 constant NONCE_OFFSET = 1;
uint256 constant ORIGIN_MAILBOX_OFFSET = 36;
uint256 constant ORIGIN_OFFSET = 5;
uint256 constant RECIPIENT_OFFSET = 45;
uint256 constant SENDER_OFFSET = 9;
uint256 constant SIGNATURES_OFFSET = 1093;
uint256 constant SIGNATURE_LENGTH = 65;
uint256 constant SINGLE_CAPACITOR = 1;
uint256 constant THRESHOLD_OFFSET = 1092;
uint256 constant UINT_MAX = ~uint256(0);
uint256 constant VERSION_OFFSET = 0;
uint256 constant _ENTERED = 2;
uint256 constant _GLOBAL_INDEX_MAINNET_FLAG = 2 ** 64;
uint256 constant _MAX_LEAFS_PER_NETWORK = 2 ** 32;
uint256 constant _NOT_ENTERED = 1;
uint256 constant _PAUSED = 3;
uint256 constant DEPOSIT_CANCEL_DELAY = 2 days;
uint256 constant DEPOSIT_CANCEL_DELAY = 7 days;
uint256 constant FREEZE_GRACE_PERIOD = 14 days;
uint256 constant FREEZE_GRACE_PERIOD = 7 days;
uint256 constant HANDLE_GAS_AMOUNT = 50_000;
uint256 constant HEADER_LENGTH = 40;
uint256 constant L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT = 800;
uint256 constant L2_GAS_LIMIT = 2_000_000;
uint256 constant MAX_FORCED_ACTIONS_REQS_PER_BLOCK = 10;
uint256 constant MAX_MESSAGE_BODY_BYTES = 2 * 2 ** 10;
uint256 constant MAX_ROLLUP_TX_SIZE = 50000;
uint256 constant MAX_TRANSFER_SIZE = 1e36;
uint256 constant MAX_UPGRADE_DELAY = 180 days;
uint256 constant MAX_VERIFIER_COUNT = uint256(64);
uint256 constant MIN_ROLLUP_TX_GAS = 100000;
uint256 constant PNT_INIT_TOTAL_SUPPLY = 96775228709640845629432729;
uint256 constant SECONDS_PER_WEEK = 604800;
uint256 constant SLOW_FILL_MAX_TOKENS_TO_SEND = 1e40;
uint256 constant UNFREEZE_DELAY = 365 days;
uint256 constant VALIDATOR_AFK_BLOCKS = 45818;
uint256 constant VERIFIER_REMOVAL_DELAY = FREEZE_GRACE_PERIOD + (21 days);
uint256 constant VERSION = 0;
uint256 constant ancillaryBytesLimit = 8192;
uint256 constant l2MaxSubmissionCost = 0.01e18;
uint256 constant l2MaxSubmission_Cost = 0.01e1_8;
uint256 constant minAllowedPacketLength = 1;
uint32 constant DST_0 = 0;
uint32 constant DST_1 = 1;
uint32 constant DST_CHALLENGE = 2;
uint32 constant MAX_ACCOUNT_ID = 16777215;
uint32 constant MAX_AMOUNT_OF_REGISTERED_TOKENS = 1023;
uint32 constant MAX_FUNGIBLE_TOKEN_ID = 65535;
uint32 constant RECEIVE_DEFAULT_GAS_LIMIT = 200_000;
uint32 constant SPECIAL_ACCOUNT_ID = 16777215;
uint32 constant SPECIAL_NFT_TOKEN_ID = 2147483646;
uint32 constant _MAINNET_NETWORK_ID = 0;
uint32 constant _ZKEVM_NETWORK_ID = 1;
uint32 constant RELAY_MESSAGE_L2_GAS_LIMIT = 2_000_000;
uint32 constant RELAY_TOKENS_L2_GAS_LIMIT = 300_000;
uint64 constant GENESIS_NODE = 0;
uint64 constant MAX_PRIORITY_REQUESTS_TO_DELETE_IN_VERIFY = 6;
uint64 constant RECEIVE_DEFAULT_GAS_LIMIT = 100_000;
uint64 constant _HALT_AGGREGATION_TIMEOUT = 1 weeks;
uint64 constant _MAX_VERIFY_BATCHES = 1000;
uint64 constant DELAYED_HEADER_LEN = 112 + 1;
uint64 constant INBOX_HEADER_LEN = 40;
uint64 constant PAGE_SIZE = 65536;
uint64 constant MIN_GAS_CALLDATA_OVERHEAD = 16;
uint64 constant MIN_GAS_CONSTANT_OVERHEAD = 200_000;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 1000;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 63;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 1016;
uint64 constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 64;
uint64 constant RELAY_CALL_OVERHEAD = 40_000;
uint64 constant RELAY_CONSTANT_OVERHEAD = 200_000;
uint64 constant RELAY_GAS_CHECK_BUFFER = 5_000;
uint64 constant RELAY_RESERVED_GAS = 40_000;
uint8 constant ACCOUNT_ID_BYTES = 4;
uint8 constant ADDRESS_BYTES = 20;
uint8 constant ADDRESS_FOOTPRINT_OFFSET = 0;
uint8 constant ADDRESS_SIZE_BITS = 160;
uint8 constant AMOUNT_BYTES = 16;
uint8 constant CREATOR_ID_FOOTPRINT_OFFSET = ADDRESS_FOOTPRINT_OFFSET + ADDRESS_SIZE_BITS;
uint8 constant CREATOR_ID_SIZE_BITS = 32;
uint8 constant FEE_BYTES = 2;
uint8 constant LIST_LONG_START = 0xf8;
uint8 constant LIST_SHORT_START = 0xc0;
uint8 constant NONCE_BYTES = 4;
uint8 constant PUBKEY_BYTES = 32;
uint8 constant PUBKEY_HASH_BYTES = 20;
uint8 constant SERIAL_ID_FOOTPRINT_OFFSET = CREATOR_ID_FOOTPRINT_OFFSET + CREATOR_ID_SIZE_BITS;
uint8 constant SERIAL_ID_SIZE_BITS = 32;
uint8 constant SIGNATURE_BYTES = 64;
uint8 constant STRING_LONG_START = 0xb8;
uint8 constant STRING_SHORT_START = 0x80;
uint8 constant TOKEN_BYTES = 2;
uint8 constant VK_MAX_INDEX = 3;
uint8 constant WORD_SIZE = 32;
uint8 constant ACCOUNT_ID_BYTES = 4;
uint8 constant ADDRESS_BYTES = 20;
uint8 constant AMOUNT_BYTES = 16;
uint8 constant BLOCK_NUMBER_PARAM_ID = 200;
uint8 constant CHUNK_BYTES = 10;
uint8 constant CONFIRM_NODE_EVENT = 1;
uint8 constant CONTENT_HASH_BYTES = 32;
uint8 constant CREATE_NODE_EVENT = 0;
uint8 constant ETH_SIGN_RS_BYTES = 32;
uint8 constant FEE_BYTES = 2;
uint8 constant INITIALIZATION_MSG_TYPE = 11;
uint8 constant LOGIC_OP_PARAM_ID = 204;
uint8 constant MAX_SEND_COUNT = 100;
uint8 constant NFT_SERIAL_ID_BYTES = 4;
uint8 constant NONCE_BYTES = 4;
uint8 constant OLD_KEY_RETENTION = 16;
uint8 constant OP_TYPE_BYTES = 1;
uint8 constant ORACLE_PARAM_ID = 203;
uint8 constant PARAM_VALUE_PARAM_ID = 205;
uint8 constant PREFIX_EXTENSION_EVEN = 0;
uint8 constant PREFIX_EXTENSION_ODD = 1;
uint8 constant PREFIX_LEAF_EVEN = 2;
uint8 constant PREFIX_LEAF_ODD = 3;
uint8 constant PUBKEY_BYTES = 32;
uint8 constant PUBKEY_HASH_BYTES = 20;
uint8 constant REJECT_NODE_EVENT = 2;
uint8 constant ROLLUP_PROTOCOL_EVENT_TYPE = 8;
uint8 constant SIGNATURE_BYTES = 64;
uint8 constant STAKE_CREATED_EVENT = 3;
uint8 constant SUCCESS_FLAG_BYTES = 1;
uint8 constant SendType_sendTxToL1 = 3;
uint8 constant TIMESTAMP_PARAM_ID = 201;
uint8 constant TOKEN_BYTES = 4;
uint8 constant _ENTERED = 2;
uint8 constant _NOT_ENTERED = 1;
uint8 constant ADDRESS_LENGTH = 20;
uint8 constant EXECUTION_PERIOD_FALLBACK_DIVISOR = 2;
uint8 constant _ADDRESS_LENGTH = 20;
uint8 constant _LEAF_TYPE_ASSET = 0;
uint8 constant _LEAF_TYPE_MESSAGE = 1;
uint8 constant INITIALIZE_TX_BRIDGE_LIST_LEN_LEN = 0xf9;
uint8 constant SHARED_DECIMALS = 6;
uint8 constant SIGNATURE_INITIALIZE_TX_V = 27;
uint8 constant VERSION = 0;
uint8 constant moduleType = 0;
uint8 constant moduleType = 3;
uint96 constant L1BLOCK_DEFAULT_CONTEXT = type(uint96).max;
address constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;
address constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;
address constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;
address constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;
address constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;
address constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;
address constant L2_STANDARD_TOKEN_FACTORY = 0x4200000000000000000000000000000000000012;
address constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;
address constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;
address constant PROXY_EOA = 0x4200000000000000000000000000000000000009;
address constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;
address payable constant OVM_ETH = payable(0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000);
bytes constant EIP712_VERSION = "1";
bytes1 constant RLP_NULL = bytes1(0x80);
bytes16 constant alphabet = "0123456789abcdef";
bytes29 constant NULL = hex"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("diamond.standard.diamond.storage");
bytes32 constant ENS_ORACLE_SUBNAME = keccak256("oracle");
bytes32 constant ENS_TOKEN_SUBNAME = keccak256("link");
bytes32 constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
bytes32 constant EMPTY_HASH = keccak256("");
bytes32 constant Z_0 = hex"0000000000000000000000000000000000000000000000000000000000000000";
bytes32 constant Z_1 = hex"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5";
bytes32 constant Z_10 = hex"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5";
bytes32 constant Z_11 = hex"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892";
bytes32 constant Z_12 = hex"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c";
bytes32 constant Z_13 = hex"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb";
bytes32 constant Z_14 = hex"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc";
bytes32 constant Z_15 = hex"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2";
bytes32 constant Z_16 = hex"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f";
bytes32 constant Z_17 = hex"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a";
bytes32 constant Z_18 = hex"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0";
bytes32 constant Z_19 = hex"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0";
bytes32 constant Z_2 = hex"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30";
bytes32 constant Z_20 = hex"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2";
bytes32 constant Z_21 = hex"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9";
bytes32 constant Z_22 = hex"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377";
bytes32 constant Z_23 = hex"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652";
bytes32 constant Z_24 = hex"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef";
bytes32 constant Z_25 = hex"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d";
bytes32 constant Z_26 = hex"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0";
bytes32 constant Z_27 = hex"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e";
bytes32 constant Z_28 = hex"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e";
bytes32 constant Z_29 = hex"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322";
bytes32 constant Z_3 = hex"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85";
bytes32 constant Z_30 = hex"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735";
bytes32 constant Z_31 = hex"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9";
bytes32 constant Z_32 = hex"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757";
bytes32 constant Z_4 = hex"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344";
bytes32 constant Z_5 = hex"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d";
bytes32 constant Z_6 = hex"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968";
bytes32 constant Z_7 = hex"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83";
bytes32 constant Z_8 = hex"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af";
bytes32 constant Z_9 = hex"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0";
bytes32 constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;
bytes32 constant CALLBACK_REGISTERS_SLOT = 0x5da136eb38f8d8e354915fc8a767c0dc81d49de5fb65d5477122a82ddd976240;
bytes32 constant GOVENOR_OF_SLOT = 0x8400683eb2cb350596d73644c0c89fe45f108600003457374f4ab3e87b4f3aa3;
bytes32 constant GOVERNOR_SET_SLOT = 0x546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c;
bytes32 constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
bytes32 constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;
bytes32 constant ADD_EXECUTOR_ROLE = keccak256("ADD_EXECUTOR_ROLE");
bytes32 constant BORROWER_ADMIN_ROLE = keccak256("BORROWER_ADMIN_ROLE");
bytes32 constant CLAIM_OPERATOR_ROLE = keccak256("CLAIM_OPERATOR_ROLE");
bytes32 constant CONFIG_UPDATER_ROLE = keccak256("CONFIG_UPDATER_ROLE");
bytes32 constant DEBT_OPERATOR_ROLE = keccak256("DEBT_OPERATOR_ROLE");
bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;
bytes32 constant EMERGENCY_ROLE = keccak256("EMERGENCY_ROLE");
bytes32 constant EPOCH_PARAMETERS_ROLE = keccak256("EPOCH_PARAMETERS_ROLE");
bytes32 constant FINALIZED_HASH = 0x0000000000000000000000000000000000000000000000000000000000000001;
bytes32 constant INFO_TYPE_HASH = 0x1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d;
bytes32 constant MAKER_ROLE = keccak256("MAKER_ROLE");
bytes32 constant OWNER_ROLE = keccak256("OWNER_ROLE");
bytes32 constant OWNER_TYPE_HASH = 0x353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764;
bytes32 constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
bytes32 constant REWARDS_RATE_ROLE = keccak256("REWARDS_RATE_ROLE");
bytes32 constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;
bytes32 constant SENTRY_ROLE = keccak256("SENTRY_ROLE");
bytes32 constant SLASHER_ROLE = keccak256("SLASHER_ROLE");
bytes32 constant STAKE_OPERATOR_ROLE = keccak256("STAKE_OPERATOR_ROLE");
bytes32 constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;
bytes32 constant TYPE_HASH = 0xb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea;
bytes32 constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;
bytes32 constant UNPAUSER_ROLE = keccak256("UNPAUSER_ROLE");
bytes32 constant WITHDRAWAL_UNLOCKER_ROLE = keccak256("WITHDRAWAL_UNLOCKER_ROLE");
string constant NAME = "Wrapped Ethereum DYDX";
string constant SYMBOL = "wethDYDX";
string constant EIP712_DOMAIN_NAME = "dYdX Governance";
string constant EIP712_DOMAIN_NAME = "dYdX Safety Module";
string constant EIP712_DOMAIN_VERSION = "1";
uint128 constant DEQUEUE_MAX = 100;
uint16 constant AAVE_REFERRAL_CODE = 0;
uint16 constant DEFAULT_COPY_BYTES = 256;
uint16 constant INITIAL_AAVE_REFERRAL_CODE = 0;
uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;
uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;
uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;
uint256 constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
uint256 constant SNAPSHOT_DURATION = 30 minutes;
uint256 constant TREE_RADIX = 16;
uint256 constant TWENTY_SEVEN_BYTES = 8 * 27;
uint256 constant LINK_DIVISIBILITY = 10 ** 18;
uint256 constant AMOUNT_OVERRIDE = 0;
uint256 constant OPERATOR_ARGS_VERSION = 2;
uint256 constant ORACLE_ARGS_VERSION = 1;
uint256 constant ENTERED = 2;
uint256 constant MAX_LEAVES = 2 ** TREE_DEPTH - 1;
uint256 constant MAX_LIST_LENGTH = 32;
uint256 constant NOT_ENTERED = 1;
uint256 constant PREFIX_LENGTH = 76;
uint256 constant REMOVE_DELAY = 7 days;
uint256 constant SHORTFALL_INDEX_BASE = 1e36;
uint256 constant TREE_DEPTH = 32;
uint256 constant ARITHMETIC_ERROR_CODE = 0x11;
uint256 constant DEFAULT_EXPIRY_DURATION = 1 << 255;
uint256 constant DIVISION_ERROR_CODE = 0x12;
uint256 constant ENTERED = uint256(int256(-1));
uint256 constant IDENTIFIER_LEN = 1;
uint256 constant INDEX_BASE = 10 ** 18;
uint256 constant LOW_27_BYTES_MASK = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff; // (1 << _27_BYTES_IN_BITS) - 1;
uint256 constant MIN_BLACKOUT_WINDOW = 3 days;
uint256 constant NOT_ENTERED = 1;
uint256 constant PANIC_ERROR_SIGNATURE = 0x4e487b71;
uint256 constant _delay = 7 days;
uint256 constant A_PRECISION = 100;
uint256 constant BPS_FEE_DENOMINATOR = 10_000;
uint256 constant DEFAULT_DEADLINE_EXTENSION = 3600;
uint256 constant EXCHANGE_RATE_BASE = 1e18;
uint256 constant EXCHANGE_RATE_MAY_OVERFLOW = (2 ** 256 - 1) / MAX_UNDERLYING_BALANCE;
uint256 constant EXECUTE_CALLDATA_RESERVE_GAS = 10_000;
uint256 constant FEE_DENOMINATOR = 1e10;
uint256 constant FUTURE_TIME_BUFFER = 3;
uint256 constant GOVERNANCE_DELAY = 7 days;
uint256 constant INITIAL_LIQUIDITY_FEE_NUMERATOR = 9_995;
uint256 constant INITIAL_MAX_ROUTERS = 5;
uint256 constant MAXIMUM_POOLED_TOKENS = 16;
uint256 constant MAX_A = 10 ** 6;
uint256 constant MAX_ADMIN_FEE = 1e10;
uint256 constant MAX_A_CHANGE = 2;
uint256 constant MAX_DOMAINS = 500;
uint256 constant MAX_LOOP_LIMIT = 256;
uint256 constant MAX_SLASH_DENOMINATOR = 100;
uint256 constant MAX_SLASH_NUMERATOR = 95;
uint256 constant MAX_SWAP_FEE = 1e8;
uint256 constant MAX_UNDERLYING_BALANCE = 1e28;
uint256 constant MINIMUM_POOLED_TOKENS = 2;
uint256 constant MIN_RAMP_DELAY = 1 days;
uint256 constant MIN_RAMP_TIME = 14 days;
uint256 constant ORACLE_VALID_PERIOD = 1 minutes;
uint256 constant REVISION = 1;
uint256 constant STAKE_AMOUNT_MAY_OVERFLOW = (2 ** 256 - 1) / EXCHANGE_RATE_BASE;
uint256 constant TOTAL_ALLOCATION = 1e4;
uint256 constant TRADER_SCORE_ALPHA_BASE = 10 ** 18;
uint256 constant WAITING_PERIOD = 7 days;
uint256 constant _MAX_PERCENTAGE = 1_000_000;
uint8 constant LIST_LONG_START = 0xf8;
uint8 constant LIST_SHORT_START = 0xc0;
uint8 constant PREFIX_EXTENSION_EVEN = 0;
uint8 constant PREFIX_EXTENSION_ODD = 1;
uint8 constant PREFIX_LEAF_EVEN = 2;
uint8 constant PREFIX_LEAF_ODD = 3;
uint8 constant STRING_LONG_START = 0xb8;
uint8 constant STRING_SHORT_START = 0x80;
uint8 constant WORD_SIZE = 32;
uint8 constant MAJOR_TYPE_ARRAY = 4;
uint8 constant MAJOR_TYPE_BYTES = 2;
uint8 constant MAJOR_TYPE_CONTENT_FREE = 7;
uint8 constant MAJOR_TYPE_INT = 0;
uint8 constant MAJOR_TYPE_MAP = 5;
uint8 constant MAJOR_TYPE_NEGATIVE_INT = 1;
uint8 constant MAJOR_TYPE_STRING = 3;
uint8 constant MAJOR_TYPE_TAG = 6;
uint8 constant TAG_TYPE_BIGNUM = 2;
uint8 constant TAG_TYPE_NEGATIVE_BIGNUM = 3;
uint8 constant DEFAULT_NORMALIZED_DECIMALS = uint8(18);
uint8 constant POOL_PRECISION_DECIMALS = 18;
bytes32 constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
bytes32 constant MY_ROLE = keccak256("MY_ROLE");
address constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;
address constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;
address constant UNISWAP_L1_TIMELOCK = 0x1a9C8182C09F50C8318d769245beA52c32BE35BC;
address constant UNISWAP_L2_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;
address constant UNSAFE_CREATERETRYABLETICKET_CALLER = 0x4dC25eA85FAD2F578685A4d8E404C12164eA405B;
bytes32 constant DEFAULT_L2_LOGS_TREE_ROOT_HASH = bytes32(0);
bytes32 constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
bytes32 constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
bytes32 constant FEES_UPDATER_ROLE = keccak256("FEES_UPDATER_ROLE");
bytes32 constant FEES_UPDATE_SIG_IDENTIFIER = keccak256("FEES_UPDATE");
bytes32 constant GOVERNANCE_ROLE = keccak256("GOVERNANCE_ROLE");
bytes32 constant L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH = 0x72abee45b59e344af8a6e520241c4744aff26ed411f4c4b00f8af09adada43ba;
bytes32 constant RESCUE_ROLE = keccak256("RESCUE_ROLE");
bytes32 constant TRANSMITTER_ROLE = keccak256("TRANSMITTER_ROLE");
bytes32 constant TRIP_GLOBAL_SIG_IDENTIFIER = keccak256("TRIP_GLOBAL");
bytes32 constant TRIP_NATIVE_SIG_IDENTIFIER = keccak256("TRIP_NATIVE");
bytes32 constant TRIP_PATH_SIG_IDENTIFIER = keccak256("TRIP_PATH");
bytes32 constant TRIP_PROPOSAL_SIG_IDENTIFIER = keccak256("TRIP_PROPOSAL");
bytes32 constant TRIP_ROLE = keccak256("TRIP_ROLE");
bytes32 constant UN_TRIP_GLOBAL_SIG_IDENTIFIER = keccak256("UN_TRIP_GLOBAL");
bytes32 constant UN_TRIP_NATIVE_SIG_IDENTIFIER = keccak256("UN_TRIP_NATIVE");
bytes32 constant UN_TRIP_PATH_SIG_IDENTIFIER = keccak256("UN_TRIP_PATH");
bytes32 constant UN_TRIP_ROLE = keccak256("UN_TRIP_ROLE");
bytes32 constant WATCHER_ROLE = keccak256("WATCHER_ROLE");
bytes32 constant WITHDRAW_ROLE = keccak256("WITHDRAW_ROLE");
uint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 1 hours;
uint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 3 days;
uint256 constant ETH_POS_BLOCK_TIME = 12;
uint256 constant L1_GAS_PER_PUBDATA_BYTE = 17;
uint256 constant L1_TX_DELTA_544_ENCODING_BYTES = 1656;
uint256 constant L1_TX_DELTA_FACTORY_DEPS_L2_GAS = 2473;
uint256 constant L1_TX_DELTA_FACTORY_DEPS_PUBDATA = 64;
uint256 constant L1_TX_INTRINSIC_L2_GAS = 167157;
uint256 constant L1_TX_INTRINSIC_PUBDATA = 88;
uint256 constant L1_TX_MIN_L2_GAS_BASE = 173484;
uint256 constant L2_LOG_ADDRESS_OFFSET = 4;
uint256 constant L2_LOG_KEY_OFFSET = 24;
uint256 constant L2_LOG_VALUE_OFFSET = 56;
uint256 constant L2_TO_L1_LOG_SERIALIZE_SIZE = 88;
uint256 constant MAX_ALLOWED_PROTOCOL_VERSION_DELTA = 100;
uint256 constant MAX_DATA_SIZE = 117964;
uint256 constant MAX_GAS_PER_TRANSACTION = 80000000;
uint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 + L2_TO_L1_LOG_SERIALIZE_SIZE * 512;
uint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 * L2_TO_L1_LOG_SERIALIZE_SIZE + 512;
uint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 * L2_TO_L1_LOG_SERIALIZE_SIZE * 512;
uint256 constant MAX_NEW_FACTORY_DEPS = 32;
uint256 constant MEMORY_OVERHEAD_GAS = 10;
uint256 constant PACKED_L2_BLOCK_TIMESTAMP_MASK = 0xffffffffffffffffffffffffffffffff;
uint256 constant PRIORITY_EXPIRATION = 0 days;
uint256 constant PRIORITY_OPERATION_L2_TX_TYPE = 255;
uint256 constant PUBLIC_INPUT_SHIFT = 32;
uint256 constant REQUIRED_L2_GAS_PRICE_PER_PUBDATA = 800;
uint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;
uint256 constant SYSTEM_UPGRADE_L2_TX_TYPE = 254;
uint256 constant TX_SLOT_OVERHEAD_L2_GAS = 10000;
uint64 constant NO_CHAL_INDEX = 0;
uint8 constant INITIALIZATION_MSG_TYPE = 11;
uint8 constant L1MessageType_L2FundedByL1 = 7;
uint8 constant L1MessageType_batchPostingReport = 13;
uint8 constant L1MessageType_ethDeposit = 12;
uint8 constant L1MessageType_submitRetryableTx = 9;
uint8 constant L2MessageType_unsignedContractTx = 1;
uint8 constant L2MessageType_unsignedEOATx = 0;
uint8 constant L2_MSG = 3;
uint8 constant ROLLUP_PROTOCOL_EVENT_TYPE = 8;
bool constant IS_TRUE = true;
bool constant IS_FALSE = false;
uint8 constant Testing = (myVal * 123) + z;
